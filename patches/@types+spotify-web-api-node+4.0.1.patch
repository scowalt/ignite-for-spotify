diff --git a/node_modules/@types/spotify-web-api-node/index.d.ts b/node_modules/@types/spotify-web-api-node/index.d.ts
index b86dfe0..ff5f483 100644
--- a/node_modules/@types/spotify-web-api-node/index.d.ts
+++ b/node_modules/@types/spotify-web-api-node/index.d.ts
@@ -2,7 +2,7 @@
 // Project: https://github.com/thelinmichael/spotify-web-api-node
 // Definitions by: Magnar Ovedal Myrtveit <https://github.com/Stadly>
 // Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
-// TypeScript Version: 2.2
+// TypeScript Version: 3.8
 
 /// <reference types="spotify-api" />
 
@@ -42,8 +42,8 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful, returns an object containing information
      *          about the track. Not returned if a callback is given.
      */
-    getTrack(trackId: string, options: MarketOptions, callback: Callback<SpotifyApi.SingleTrackResponse>): void;
-    getTrack(trackId: string, options?: MarketOptions): Promise<Response<SpotifyApi.SingleTrackResponse>>;
+    getTrack(trackId: string, options: MarketOptions, callback: SpotifyWebApi.Callback<SpotifyApi.SingleTrackResponse>): void;
+    getTrack(trackId: string, options?: MarketOptions): Promise<SpotifyWebApi.Response<SpotifyApi.SingleTrackResponse>>;
 
     /**
      * Look up several tracks.
@@ -54,8 +54,8 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful, returns an object containing information
      *          about the artists. Not returned if a callback is given.
      */
-    getTracks(trackIds: ReadonlyArray<string>, options: MarketOptions, callback: Callback<SpotifyApi.MultipleTracksResponse>): void;
-    getTracks(trackIds: ReadonlyArray<string>, options?: MarketOptions): Promise<Response<SpotifyApi.MultipleTracksResponse>>;
+    getTracks(trackIds: ReadonlyArray<string>, options: MarketOptions, callback: SpotifyWebApi.Callback<SpotifyApi.MultipleTracksResponse>): void;
+    getTracks(trackIds: ReadonlyArray<string>, options?: MarketOptions): Promise<SpotifyWebApi.Response<SpotifyApi.MultipleTracksResponse>>;
 
     /**
      * Look up an album.
@@ -66,8 +66,8 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful, returns an object containing information
      *          about the album. Not returned if a callback is given.
      */
-    getAlbum(albumId: string, options: MarketOptions, callback: Callback<SpotifyApi.SingleAlbumResponse>): void;
-    getAlbum(albumId: string, options?: MarketOptions): Promise<Response<SpotifyApi.SingleAlbumResponse>>;
+    getAlbum(albumId: string, options: MarketOptions, callback: SpotifyWebApi.Callback<SpotifyApi.SingleAlbumResponse>): void;
+    getAlbum(albumId: string, options?: MarketOptions): Promise<SpotifyWebApi.Response<SpotifyApi.SingleAlbumResponse>>;
 
     /**
      * Look up several albums.
@@ -78,8 +78,8 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful, returns an object containing information
      *          about the albums. Not returned if a callback is given.
      */
-    getAlbums(albumIds: ReadonlyArray<string>, options: MarketOptions, callback: Callback<SpotifyApi.MultipleAlbumsResponse>): void;
-    getAlbums(albumIds: ReadonlyArray<string>, options?: MarketOptions): Promise<Response<SpotifyApi.MultipleAlbumsResponse>>;
+    getAlbums(albumIds: ReadonlyArray<string>, options: MarketOptions, callback: SpotifyWebApi.Callback<SpotifyApi.MultipleAlbumsResponse>): void;
+    getAlbums(albumIds: ReadonlyArray<string>, options?: MarketOptions): Promise<SpotifyWebApi.Response<SpotifyApi.MultipleAlbumsResponse>>;
 
     /**
      * Look up an artist.
@@ -89,8 +89,8 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful, returns an object containing information
      *          about the artist. Not returned if a callback is given.
      */
-    getArtist(artistId: string, callback: Callback<SpotifyApi.SingleArtistResponse>): void;
-    getArtist(artistId: string): Promise<Response<SpotifyApi.SingleArtistResponse>>;
+    getArtist(artistId: string, callback: SpotifyWebApi.Callback<SpotifyApi.SingleArtistResponse>): void;
+    getArtist(artistId: string): Promise<SpotifyWebApi.Response<SpotifyApi.SingleArtistResponse>>;
 
     /**
      * Look up several artists.
@@ -100,8 +100,8 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful, returns an object containing information
      *          about the artists. Not returned if a callback is given.
      */
-    getArtists(artistIds: ReadonlyArray<string>, callback: Callback<SpotifyApi.MultipleArtistsResponse>): void;
-    getArtists(artistIds: ReadonlyArray<string>): Promise<Response<SpotifyApi.MultipleArtistsResponse>>;
+    getArtists(artistIds: ReadonlyArray<string>, callback: SpotifyWebApi.Callback<SpotifyApi.MultipleArtistsResponse>): void;
+    getArtists(artistIds: ReadonlyArray<string>): Promise<SpotifyWebApi.Response<SpotifyApi.MultipleArtistsResponse>>;
 
     /**
      * Search for music entities of certain types.
@@ -115,8 +115,8 @@ declare class SpotifyWebApi {
      *          search results. The result is paginated. If the promise is rejected,
      *          it contains an error object. Not returned if a callback is given.
      */
-    search(query: string, types: ReadonlyArray<SearchType>, options: SearchOptions, callback: Callback<SpotifyApi.SearchResponse>): void;
-    search(query: string, types: ReadonlyArray<SearchType>, options?: SearchOptions): Promise<Response<SpotifyApi.SearchResponse>>;
+    search(query: string, types: ReadonlyArray<SearchType>, options: SearchOptions, callback: SpotifyWebApi.Callback<SpotifyApi.SearchResponse>): void;
+    search(query: string, types: ReadonlyArray<SearchType>, options?: SearchOptions): Promise<SpotifyWebApi.Response<SpotifyApi.SearchResponse>>;
 
     /**
      * Search for an album.
@@ -128,8 +128,8 @@ declare class SpotifyWebApi {
      *          search results. The result is paginated. If the promise is rejected,
      *          it contains an error object. Not returned if a callback is given.
      */
-    searchAlbums(query: string, options: SearchOptions, callback: Callback<SpotifyApi.SearchResponse>): void;
-    searchAlbums(query: string, options?: SearchOptions): Promise<Response<SpotifyApi.SearchResponse>>;
+    searchAlbums(query: string, options: SearchOptions, callback: SpotifyWebApi.Callback<SpotifyApi.SearchResponse>): void;
+    searchAlbums(query: string, options?: SearchOptions): Promise<SpotifyWebApi.Response<SpotifyApi.SearchResponse>>;
 
     /**
      * Search for an artist.
@@ -141,8 +141,8 @@ declare class SpotifyWebApi {
      *          search results. The result is paginated. If the promise is rejected,
      *          it contains an error object. Not returned if a callback is given.
      */
-    searchArtists(query: string, options: SearchOptions, callback: Callback<SpotifyApi.SearchResponse>): void;
-    searchArtists(query: string, options?: SearchOptions): Promise<Response<SpotifyApi.SearchResponse>>;
+    searchArtists(query: string, options: SearchOptions, callback: SpotifyWebApi.Callback<SpotifyApi.SearchResponse>): void;
+    searchArtists(query: string, options?: SearchOptions): Promise<SpotifyWebApi.Response<SpotifyApi.SearchResponse>>;
 
     /**
      * Search for a track.
@@ -154,8 +154,8 @@ declare class SpotifyWebApi {
      *          search results. The result is paginated. If the promise is rejected,
      *          it contains an error object. Not returned if a callback is given.
      */
-    searchTracks(query: string, options: SearchOptions, callback: Callback<SpotifyApi.SearchResponse>): void;
-    searchTracks(query: string, options?: SearchOptions): Promise<Response<SpotifyApi.SearchResponse>>;
+    searchTracks(query: string, options: SearchOptions, callback: SpotifyWebApi.Callback<SpotifyApi.SearchResponse>): void;
+    searchTracks(query: string, options?: SearchOptions): Promise<SpotifyWebApi.Response<SpotifyApi.SearchResponse>>;
 
     /**
      * Search for playlists.
@@ -167,8 +167,8 @@ declare class SpotifyWebApi {
      *          search results. The result is paginated. If the promise is rejected,
      *          it contains an error object. Not returned if a callback is given.
      */
-    searchPlaylists(query: string, options: SearchOptions, callback: Callback<SpotifyApi.SearchResponse>): void;
-    searchPlaylists(query: string, options?: SearchOptions): Promise<Response<SpotifyApi.SearchResponse>>;
+    searchPlaylists(query: string, options: SearchOptions, callback: SpotifyWebApi.Callback<SpotifyApi.SearchResponse>): void;
+    searchPlaylists(query: string, options?: SearchOptions): Promise<SpotifyWebApi.Response<SpotifyApi.SearchResponse>>;
 
     /**
      * Get an artist's albums.
@@ -180,8 +180,8 @@ declare class SpotifyWebApi {
      *          for the given artist. The result is paginated. If the promise is rejected,
      *          it contains an error object. Not returned if a callback is given.
      */
-    getArtistAlbums(artistId: string, options: GetArtistAlbumsOptions, callback: Callback<SpotifyApi.ArtistsAlbumsResponse>): void;
-    getArtistAlbums(artistId: string, options?: GetArtistAlbumsOptions): Promise<Response<SpotifyApi.ArtistsAlbumsResponse>>;
+    getArtistAlbums(artistId: string, options: GetArtistAlbumsOptions, callback: SpotifyWebApi.Callback<SpotifyApi.ArtistsAlbumsResponse>): void;
+    getArtistAlbums(artistId: string, options?: GetArtistAlbumsOptions): Promise<SpotifyWebApi.Response<SpotifyApi.ArtistsAlbumsResponse>>;
 
     /**
      * Get the tracks of an album.
@@ -193,8 +193,8 @@ declare class SpotifyWebApi {
      *                    tracks in the album. The result is paginated. If the promise is rejected.
      *                    it contains an error object. Not returned if a callback is given.
      */
-    getAlbumTracks(albumId: string, options: PaginationMarketOptions, callback: Callback<SpotifyApi.AlbumTracksResponse>): void;
-    getAlbumTracks(albumId: string, options?: PaginationMarketOptions): Promise<Response<SpotifyApi.AlbumTracksResponse>>;
+    getAlbumTracks(albumId: string, options: PaginationMarketOptions, callback: SpotifyWebApi.Callback<SpotifyApi.AlbumTracksResponse>): void;
+    getAlbumTracks(albumId: string, options?: PaginationMarketOptions): Promise<SpotifyWebApi.Response<SpotifyApi.AlbumTracksResponse>>;
 
     /**
      * Get an artist's top tracks.
@@ -206,8 +206,8 @@ declare class SpotifyWebApi {
      *          artist's top tracks in the given country. If the promise is rejected,
      *          it contains an error object. Not returned if a callback is given.
      */
-    getArtistTopTracks(artistId: string, country: string, callback: Callback<SpotifyApi.ArtistsTopTracksResponse>): void;
-    getArtistTopTracks(artistId: string, country: string): Promise<Response<SpotifyApi.ArtistsTopTracksResponse>>;
+    getArtistTopTracks(artistId: string, country: string, callback: SpotifyWebApi.Callback<SpotifyApi.ArtistsTopTracksResponse>): void;
+    getArtistTopTracks(artistId: string, country: string): Promise<SpotifyWebApi.Response<SpotifyApi.ArtistsTopTracksResponse>>;
 
     /**
      * Get related artists.
@@ -217,8 +217,8 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful, returns an object containing the
      *          related artists. If the promise is rejected, it contains an error object. Not returned if a callback is given.
      */
-    getArtistRelatedArtists(artistId: string, callback: Callback<SpotifyApi.ArtistsRelatedArtistsResponse>): void;
-    getArtistRelatedArtists(artistId: string): Promise<Response<SpotifyApi.ArtistsRelatedArtistsResponse>>;
+    getArtistRelatedArtists(artistId: string, callback: SpotifyWebApi.Callback<SpotifyApi.ArtistsRelatedArtistsResponse>): void;
+    getArtistRelatedArtists(artistId: string): Promise<SpotifyWebApi.Response<SpotifyApi.ArtistsRelatedArtistsResponse>>;
 
     /**
      * Get information about a user.
@@ -229,8 +229,8 @@ declare class SpotifyWebApi {
      *          containing information about the user. If the promise is
      *          rejected, it contains an error object. Not returned if a callback is given.
      */
-    getUser(userId: string, callback: Callback<SpotifyApi.UserProfileResponse>): void;
-    getUser(userId: string): Promise<Response<SpotifyApi.UserProfileResponse>>;
+    getUser(userId: string, callback: SpotifyWebApi.Callback<SpotifyApi.UserProfileResponse>): void;
+    getUser(userId: string): Promise<SpotifyWebApi.Response<SpotifyApi.UserProfileResponse>>;
 
     /**
      * Get information about the user that has signed in (the current user).
@@ -241,8 +241,8 @@ declare class SpotifyWebApi {
      *          depends on the permissions given by the user. If the promise is
      *          rejected, it contains an error object. Not returned if a callback is given.
      */
-    getMe(callback: Callback<SpotifyApi.CurrentUsersProfileResponse>): void;
-    getMe(): Promise<Response<SpotifyApi.CurrentUsersProfileResponse>>;
+    getMe(callback: SpotifyWebApi.Callback<SpotifyApi.CurrentUsersProfileResponse>): void;
+    getMe(): Promise<SpotifyWebApi.Response<SpotifyApi.CurrentUsersProfileResponse>>;
 
     /**
      * Get a user's playlists.
@@ -255,10 +255,10 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful, resolves to an object containing
      *          a list of playlists. If rejected, it contains an error object. Not returned if a callback is given.
      */
-    getUserPlaylists(userId: string, options: PaginationOptions, callback: Callback<SpotifyApi.ListOfUsersPlaylistsResponse>): void;
-    getUserPlaylists(options: PaginationOptions, callback: Callback<SpotifyApi.ListOfUsersPlaylistsResponse>): void;
-    getUserPlaylists(userId: string, options?: PaginationOptions): Promise<Response<SpotifyApi.ListOfUsersPlaylistsResponse>>;
-    getUserPlaylists(options?: PaginationOptions): Promise<Response<SpotifyApi.ListOfUsersPlaylistsResponse>>;
+    getUserPlaylists(userId: string, options: PaginationOptions, callback: SpotifyWebApi.Callback<SpotifyApi.ListOfUsersPlaylistsResponse>): void;
+    getUserPlaylists(options: PaginationOptions, callback: SpotifyWebApi.Callback<SpotifyApi.ListOfUsersPlaylistsResponse>): void;
+    getUserPlaylists(userId: string, options?: PaginationOptions): Promise<SpotifyWebApi.Response<SpotifyApi.ListOfUsersPlaylistsResponse>>;
+    getUserPlaylists(options?: PaginationOptions): Promise<SpotifyWebApi.Response<SpotifyApi.ListOfUsersPlaylistsResponse>>;
 
     /**
      * Get a playlist.
@@ -269,8 +269,8 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful, resolves to an object containing
      *          the playlist. If rejected, it contains an error object. Not returned if a callback is given.
      */
-    getPlaylist(playlistId: string, options: GetPlaylistOptions, callback: Callback<SpotifyApi.SinglePlaylistResponse>): void;
-    getPlaylist(playlistId: string, options?: GetPlaylistOptions): Promise<Response<SpotifyApi.SinglePlaylistResponse>>;
+    getPlaylist(playlistId: string, options: GetPlaylistOptions, callback: SpotifyWebApi.Callback<SpotifyApi.SinglePlaylistResponse>): void;
+    getPlaylist(playlistId: string, options?: GetPlaylistOptions): Promise<SpotifyWebApi.Response<SpotifyApi.SinglePlaylistResponse>>;
 
     /**
      * Get tracks in a playlist.
@@ -281,8 +281,8 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful, resolves to an object that containing
      * the tracks in the playlist. If rejected, it contains an error object. Not returned if a callback is given.
      */
-    getPlaylistTracks(playlistId: string, options: GetPlaylistTracksOptions, callback: Callback<SpotifyApi.PlaylistTrackResponse>): void;
-    getPlaylistTracks(playlistId: string, options?: GetPlaylistTracksOptions): Promise<Response<SpotifyApi.PlaylistTrackResponse>>;
+    getPlaylistTracks(playlistId: string, options: GetPlaylistTracksOptions, callback: SpotifyWebApi.Callback<SpotifyApi.PlaylistTrackResponse>): void;
+    getPlaylistTracks(playlistId: string, options?: GetPlaylistTracksOptions): Promise<SpotifyWebApi.Response<SpotifyApi.PlaylistTrackResponse>>;
 
     /**
      * Create a playlist.
@@ -294,8 +294,8 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful, resolves to an object containing information about the
      *          created playlist. If rejected, it contains an error object. Not returned if a callback is given.
      */
-    createPlaylist(userId: string, playlistName: string, options: PlaylistDetailsOptions, callback: Callback<SpotifyApi.CreatePlaylistResponse>): void;
-    createPlaylist(userId: string, playlistName: string, options?: PlaylistDetailsOptions): Promise<Response<SpotifyApi.CreatePlaylistResponse>>;
+    createPlaylist(userId: string, playlistName: string, options: PlaylistDetailsOptions, callback: SpotifyWebApi.Callback<SpotifyApi.CreatePlaylistResponse>): void;
+    createPlaylist(userId: string, playlistName: string, options?: PlaylistDetailsOptions): Promise<SpotifyWebApi.Response<SpotifyApi.CreatePlaylistResponse>>;
 
     /**
      * Follow a playlist.
@@ -305,8 +305,8 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful, simply resolves to an empty object. If rejected,
      * it contains an error object. Not returned if a callback is given.
      */
-    followPlaylist(playlistId: string, options: PublicOptions, callback: Callback<SpotifyApi.FollowPlaylistReponse>): void;
-    followPlaylist(playlistId: string, options?: PublicOptions): Promise<Response<SpotifyApi.FollowPlaylistReponse>>;
+    followPlaylist(playlistId: string, options: PublicOptions, callback: SpotifyWebApi.Callback<SpotifyApi.FollowPlaylistReponse>): void;
+    followPlaylist(playlistId: string, options?: PublicOptions): Promise<SpotifyWebApi.Response<SpotifyApi.FollowPlaylistReponse>>;
 
     /**
      * Unfollow a playlist.
@@ -316,8 +316,8 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful, simply resolves to an empty object. If rejected,
      * it contains an error object. Not returned if a callback is given.
      */
-    unfollowPlaylist(playlistId: string, callback: Callback<SpotifyApi.UnfollowPlaylistReponse>): void;
-    unfollowPlaylist(playlistId: string): Promise<Response<SpotifyApi.UnfollowPlaylistReponse>>;
+    unfollowPlaylist(playlistId: string, callback: SpotifyWebApi.Callback<SpotifyApi.UnfollowPlaylistReponse>): void;
+    unfollowPlaylist(playlistId: string): Promise<SpotifyWebApi.Response<SpotifyApi.UnfollowPlaylistReponse>>;
 
     /**
      * Change playlist details.
@@ -328,8 +328,8 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful, simply resolves to an empty object. If rejected,
      * it contains an error object. Not returned if a callback is given.
      */
-    changePlaylistDetails(playlistId: string, options: ChangePlaylistOptions, callback: Callback<SpotifyApi.ChangePlaylistDetailsReponse>): void;
-    changePlaylistDetails(playlistId: string, options?: ChangePlaylistOptions): Promise<Response<SpotifyApi.ChangePlaylistDetailsReponse>>;
+    changePlaylistDetails(playlistId: string, options: ChangePlaylistOptions, callback: SpotifyWebApi.Callback<SpotifyApi.ChangePlaylistDetailsReponse>): void;
+    changePlaylistDetails(playlistId: string, options?: ChangePlaylistOptions): Promise<SpotifyWebApi.Response<SpotifyApi.ChangePlaylistDetailsReponse>>;
 
     /**
      * Replace the image used to represent a specific playlist.
@@ -340,8 +340,8 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful, simply resolves to an empty object. If rejected,
      * it contains an error object. Not returned if a callback is given.
      */
-    uploadCustomPlaylistCoverImage(playlistId: string, base64URI: string, callback: Callback<SpotifyApi.UploadCustomPlaylistCoverImageReponse>): void;
-    uploadCustomPlaylistCoverImage(playlistId: string, base64URI: string): Promise<Response<SpotifyApi.UploadCustomPlaylistCoverImageReponse>>;
+    uploadCustomPlaylistCoverImage(playlistId: string, base64URI: string, callback: SpotifyWebApi.Callback<SpotifyApi.UploadCustomPlaylistCoverImageReponse>): void;
+    uploadCustomPlaylistCoverImage(playlistId: string, base64URI: string): Promise<SpotifyWebApi.Response<SpotifyApi.UploadCustomPlaylistCoverImageReponse>>;
 
     /**
      * Add tracks to a playlist.
@@ -353,8 +353,8 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful returns an object containing a snapshot_id. If rejected,
      * it contains an error object. Not returned if a callback is given.
      */
-    addTracksToPlaylist(playlistId: string, tracks: ReadonlyArray<string>, options: PositionOptions, callback: Callback<SpotifyApi.AddTracksToPlaylistResponse>): void;
-    addTracksToPlaylist(playlistId: string, tracks: ReadonlyArray<string>, options?: PositionOptions): Promise<Response<SpotifyApi.AddTracksToPlaylistResponse>>;
+    addTracksToPlaylist(playlistId: string, tracks: ReadonlyArray<string>, options: PositionOptions, callback: SpotifyWebApi.Callback<SpotifyApi.AddTracksToPlaylistResponse>): void;
+    addTracksToPlaylist(playlistId: string, tracks: ReadonlyArray<string>, options?: PositionOptions): Promise<SpotifyWebApi.Response<SpotifyApi.AddTracksToPlaylistResponse>>;
 
     /**
      * Remove tracks from a playlist.
@@ -366,8 +366,8 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful returns an object containing a snapshot_id. If rejected,
      * it contains an error object. Not returned if a callback is given.
      */
-    removeTracksFromPlaylist(playlistId: string, tracks: ReadonlyArray<Track>, options: SnapshotOptions, callback: Callback<SpotifyApi.RemoveTracksFromPlaylistResponse>): void;
-    removeTracksFromPlaylist(playlistId: string, tracks: ReadonlyArray<Track>, options?: SnapshotOptions): Promise<Response<SpotifyApi.RemoveTracksFromPlaylistResponse>>;
+    removeTracksFromPlaylist(playlistId: string, tracks: ReadonlyArray<Track>, options: SnapshotOptions, callback: SpotifyWebApi.Callback<SpotifyApi.RemoveTracksFromPlaylistResponse>): void;
+    removeTracksFromPlaylist(playlistId: string, tracks: ReadonlyArray<Track>, options?: SnapshotOptions): Promise<SpotifyWebApi.Response<SpotifyApi.RemoveTracksFromPlaylistResponse>>;
 
     /**
      * Remove tracks from a playlist by position instead of specifying the tracks' URIs.
@@ -378,8 +378,8 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful returns an object containing a snapshot_id. If rejected,
      * it contains an error object. Not returned if a callback is given.
      */
-    removeTracksFromPlaylistByPosition(playlistId: string, positions: ReadonlyArray<number>, snapshotId: string, callback: Callback<SpotifyApi.RemoveTracksFromPlaylistResponse>): void;
-    removeTracksFromPlaylistByPosition(playlistId: string, positions: ReadonlyArray<number>, snapshotId: string): Promise<Response<SpotifyApi.RemoveTracksFromPlaylistResponse>>;
+    removeTracksFromPlaylistByPosition(playlistId: string, positions: ReadonlyArray<number>, snapshotId: string, callback: SpotifyWebApi.Callback<SpotifyApi.RemoveTracksFromPlaylistResponse>): void;
+    removeTracksFromPlaylistByPosition(playlistId: string, positions: ReadonlyArray<number>, snapshotId: string): Promise<SpotifyWebApi.Response<SpotifyApi.RemoveTracksFromPlaylistResponse>>;
 
     /**
      * Replace tracks in a playlist.
@@ -389,8 +389,8 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful returns an empty object. If rejected,
      * it contains an error object. Not returned if a callback is given.
      */
-    replaceTracksInPlaylist(playlistId: string, uris: ReadonlyArray<string>, callback: Callback<SpotifyApi.ReplacePlaylistTracksResponse>): void;
-    replaceTracksInPlaylist(playlistId: string, uris: ReadonlyArray<string>): Promise<Response<SpotifyApi.ReplacePlaylistTracksResponse>>;
+    replaceTracksInPlaylist(playlistId: string, uris: ReadonlyArray<string>, callback: SpotifyWebApi.Callback<SpotifyApi.ReplacePlaylistTracksResponse>): void;
+    replaceTracksInPlaylist(playlistId: string, uris: ReadonlyArray<string>): Promise<SpotifyWebApi.Response<SpotifyApi.ReplacePlaylistTracksResponse>>;
 
     /**
      * Reorder tracks in a playlist.
@@ -402,8 +402,8 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful returns an object containing a snapshot_id. If rejected,
      * it contains an error object. Not returned if a callback is given.
      */
-    reorderTracksInPlaylist(playlistId: string, rangeStart: number, insertBefore: number, options: ReorderPlaylistTracksOptions, callback: Callback<SpotifyApi.ReorderPlaylistTracksResponse>): void;
-    reorderTracksInPlaylist(playlistId: string, rangeStart: number, insertBefore: number, options?: ReorderPlaylistTracksOptions): Promise<Response<SpotifyApi.ReorderPlaylistTracksResponse>>;
+    reorderTracksInPlaylist(playlistId: string, rangeStart: number, insertBefore: number, options: ReorderPlaylistTracksOptions, callback: SpotifyWebApi.Callback<SpotifyApi.ReorderPlaylistTracksResponse>): void;
+    reorderTracksInPlaylist(playlistId: string, rangeStart: number, insertBefore: number, options?: ReorderPlaylistTracksOptions): Promise<SpotifyWebApi.Response<SpotifyApi.ReorderPlaylistTracksResponse>>;
 
     /**
      * Get audio features for a single track identified by its unique Spotify ID.
@@ -414,8 +414,8 @@ declare class SpotifyWebApi {
      *          containing information about the audio features. If the promise is
      *          rejected, it contains an error object. Not returned if a callback is given.
      */
-    getAudioFeaturesForTrack(trackId: string, callback: Callback<SpotifyApi.AudioFeaturesResponse>): void;
-    getAudioFeaturesForTrack(trackId: string): Promise<Response<SpotifyApi.AudioFeaturesResponse>>;
+    getAudioFeaturesForTrack(trackId: string, callback: SpotifyWebApi.Callback<SpotifyApi.AudioFeaturesResponse>): void;
+    getAudioFeaturesForTrack(trackId: string): Promise<SpotifyWebApi.Response<SpotifyApi.AudioFeaturesResponse>>;
 
     /**
      * Get audio analysis for a single track identified by its unique Spotify ID.
@@ -426,8 +426,8 @@ declare class SpotifyWebApi {
      *          containing information about the audio analysis. If the promise is
      *          rejected, it contains an error object. Not returned if a callback is given.
      */
-    getAudioAnalysisForTrack(trackId: string, callback: Callback<SpotifyApi.AudioAnalysisResponse>): void;
-    getAudioAnalysisForTrack(trackId: string): Promise<Response<SpotifyApi.AudioAnalysisResponse>>;
+    getAudioAnalysisForTrack(trackId: string, callback: SpotifyWebApi.Callback<SpotifyApi.AudioAnalysisResponse>): void;
+    getAudioAnalysisForTrack(trackId: string): Promise<SpotifyWebApi.Response<SpotifyApi.AudioAnalysisResponse>>;
 
     /**
      * Get audio features for multiple tracks identified by their unique Spotify ID.
@@ -438,8 +438,8 @@ declare class SpotifyWebApi {
      *          containing information about the audio features for the tracks. If the promise is
      *          rejected, it contains an error object. Not returned if a callback is given.
      */
-    getAudioFeaturesForTracks(trackIds: ReadonlyArray<string>, callback: Callback<SpotifyApi.MultipleAudioFeaturesResponse>): void;
-    getAudioFeaturesForTracks(trackIds: ReadonlyArray<string>): Promise<Response<SpotifyApi.MultipleAudioFeaturesResponse>>;
+    getAudioFeaturesForTracks(trackIds: ReadonlyArray<string>, callback: SpotifyWebApi.Callback<SpotifyApi.MultipleAudioFeaturesResponse>): void;
+    getAudioFeaturesForTracks(trackIds: ReadonlyArray<string>): Promise<SpotifyWebApi.Response<SpotifyApi.MultipleAudioFeaturesResponse>>;
 
     /**
      * Create a playlist-style listening experience based on seed artists, tracks and genres.
@@ -449,8 +449,8 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful, resolves to an object containing
      *          a list of tracks and a list of seeds. If rejected, it contains an error object. Not returned if a callback is given.
      */
-    getRecommendations(options: GetRecommendationsOptions, callback: Callback<SpotifyApi.RecommendationsFromSeedsResponse>): void;
-    getRecommendations(options?: GetRecommendationsOptions): Promise<Response<SpotifyApi.RecommendationsFromSeedsResponse>>;
+    getRecommendations(options: GetRecommendationsOptions, callback: SpotifyWebApi.Callback<SpotifyApi.RecommendationsFromSeedsResponse>): void;
+    getRecommendations(options?: GetRecommendationsOptions): Promise<SpotifyWebApi.Response<SpotifyApi.RecommendationsFromSeedsResponse>>;
 
     /**
      * Retrieve a URL where the user can give the application permissions.
@@ -468,8 +468,8 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful, resolves to an object containing a paging object which in turn contains
      *          playlist track objects. Not returned if a callback is given.
      */
-    getMySavedTracks(options: PaginationMarketOptions, callback: Callback<SpotifyApi.UsersSavedTracksResponse>): void;
-    getMySavedTracks(options?: PaginationMarketOptions): Promise<Response<SpotifyApi.UsersSavedTracksResponse>>;
+    getMySavedTracks(options: PaginationMarketOptions, callback: SpotifyWebApi.Callback<SpotifyApi.UsersSavedTracksResponse>): void;
+    getMySavedTracks(options?: PaginationMarketOptions): Promise<SpotifyWebApi.Response<SpotifyApi.UsersSavedTracksResponse>>;
 
     /**
      * Check if one or more tracks is already saved in the current Spotify user’s “Your Music” library.
@@ -480,8 +480,8 @@ declare class SpotifyWebApi {
      * The boolean value of true indicates that the track is part of the user's library, otherwise false.
      * Not returned if a callback is given.
      */
-    containsMySavedTracks(trackIds: ReadonlyArray<string>, callback: Callback<SpotifyApi.CheckUsersSavedTracksResponse>): void;
-    containsMySavedTracks(trackIds: ReadonlyArray<string>): Promise<Response<SpotifyApi.CheckUsersSavedTracksResponse>>;
+    containsMySavedTracks(trackIds: ReadonlyArray<string>, callback: SpotifyWebApi.Callback<SpotifyApi.CheckUsersSavedTracksResponse>): void;
+    containsMySavedTracks(trackIds: ReadonlyArray<string>): Promise<SpotifyWebApi.Response<SpotifyApi.CheckUsersSavedTracksResponse>>;
 
     /**
      * Remove a track from the authenticated user's Your Music library.
@@ -490,8 +490,8 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful returns null, otherwise an error.
      * Not returned if a callback is given.
      */
-    removeFromMySavedTracks(trackIds: ReadonlyArray<string>, callback: Callback<SpotifyApi.RemoveUsersSavedTracksResponse>): void;
-    removeFromMySavedTracks(trackIds: ReadonlyArray<string>): Promise<Response<SpotifyApi.RemoveUsersSavedTracksResponse>>;
+    removeFromMySavedTracks(trackIds: ReadonlyArray<string>, callback: SpotifyWebApi.Callback<SpotifyApi.RemoveUsersSavedTracksResponse>): void;
+    removeFromMySavedTracks(trackIds: ReadonlyArray<string>): Promise<SpotifyWebApi.Response<SpotifyApi.RemoveUsersSavedTracksResponse>>;
 
     /**
      * Add a track from the authenticated user's Your Music library.
@@ -499,8 +499,8 @@ declare class SpotifyWebApi {
      * @param callback Optional callback method to be called instead of the promise.
      * @returns A promise that if successful returns null, otherwise an error. Not returned if a callback is given.
      */
-    addToMySavedTracks(trackIds: ReadonlyArray<string>, callback: Callback<SpotifyApi.SaveTracksForUserResponse>): void;
-    addToMySavedTracks(trackIds: ReadonlyArray<string>): Promise<Response<SpotifyApi.SaveTracksForUserResponse>>;
+    addToMySavedTracks(trackIds: ReadonlyArray<string>, callback: SpotifyWebApi.Callback<SpotifyApi.SaveTracksForUserResponse>): void;
+    addToMySavedTracks(trackIds: ReadonlyArray<string>): Promise<SpotifyWebApi.Response<SpotifyApi.SaveTracksForUserResponse>>;
 
     /**
      * Remove an album from the authenticated user's Your Music library.
@@ -509,8 +509,8 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful returns null, otherwise an error.
      * Not returned if a callback is given.
      */
-    removeFromMySavedAlbums(albumIds: ReadonlyArray<string>, callback: Callback<SpotifyApi.RemoveAlbumsForUserResponse>): void;
-    removeFromMySavedAlbums(albumIds: ReadonlyArray<string>): Promise<Response<SpotifyApi.RemoveAlbumsForUserResponse>>;
+    removeFromMySavedAlbums(albumIds: ReadonlyArray<string>, callback: SpotifyWebApi.Callback<SpotifyApi.RemoveAlbumsForUserResponse>): void;
+    removeFromMySavedAlbums(albumIds: ReadonlyArray<string>): Promise<SpotifyWebApi.Response<SpotifyApi.RemoveAlbumsForUserResponse>>;
 
     /**
      * Add an album from the authenticated user's Your Music library.
@@ -518,8 +518,8 @@ declare class SpotifyWebApi {
      * @param callback Optional callback method to be called instead of the promise.
      * @returns A promise that if successful returns null, otherwise an error. Not returned if a callback is given.
      */
-    addToMySavedAlbums(albumIds: ReadonlyArray<string>, callback: Callback<SpotifyApi.SaveAlbumsForUserResponse>): void;
-    addToMySavedAlbums(albumIds: ReadonlyArray<string>): Promise<Response<SpotifyApi.SaveAlbumsForUserResponse>>;
+    addToMySavedAlbums(albumIds: ReadonlyArray<string>, callback: SpotifyWebApi.Callback<SpotifyApi.SaveAlbumsForUserResponse>): void;
+    addToMySavedAlbums(albumIds: ReadonlyArray<string>): Promise<SpotifyWebApi.Response<SpotifyApi.SaveAlbumsForUserResponse>>;
 
     /**
      * Retrieve the albums that are saved to the authenticated users Your Music library.
@@ -528,8 +528,8 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful, resolves to an object containing a paging object which in turn contains
      *          playlist album objects. Not returned if a callback is given.
      */
-    getMySavedAlbums(options: PaginationMarketOptions, callback: Callback<SpotifyApi.UsersSavedAlbumsResponse>): void;
-    getMySavedAlbums(options?: PaginationMarketOptions): Promise<Response<SpotifyApi.UsersSavedAlbumsResponse>>;
+    getMySavedAlbums(options: PaginationMarketOptions, callback: SpotifyWebApi.Callback<SpotifyApi.UsersSavedAlbumsResponse>): void;
+    getMySavedAlbums(options?: PaginationMarketOptions): Promise<SpotifyWebApi.Response<SpotifyApi.UsersSavedAlbumsResponse>>;
 
     /**
      * Check if one or more albums is already saved in the current Spotify user’s “Your Music” library.
@@ -540,8 +540,8 @@ declare class SpotifyWebApi {
      * The boolean value of true indicates that the album is part of the user's library, otherwise false.
      * Not returned if a callback is given.
      */
-    containsMySavedAlbums(albumIds: ReadonlyArray<string>, callback: Callback<SpotifyApi.CheckUserSavedAlbumsResponse>): void;
-    containsMySavedAlbums(albumIds: ReadonlyArray<string>): Promise<Response<SpotifyApi.CheckUserSavedAlbumsResponse>>;
+    containsMySavedAlbums(albumIds: ReadonlyArray<string>, callback: SpotifyWebApi.Callback<SpotifyApi.CheckUserSavedAlbumsResponse>): void;
+    containsMySavedAlbums(albumIds: ReadonlyArray<string>): Promise<SpotifyWebApi.Response<SpotifyApi.CheckUserSavedAlbumsResponse>>;
 
     /**
      * Get the current user's top artists based on calculated affinity.
@@ -550,8 +550,8 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful, resolves into a paging object of artists,
      *          otherwise an error. Not returned if a callback is given.
      */
-    getMyTopArtists(options: GetTopOptions, callback: Callback<SpotifyApi.UsersTopArtistsResponse>): void;
-    getMyTopArtists(options?: GetTopOptions): Promise<Response<SpotifyApi.UsersTopArtistsResponse>>;
+    getMyTopArtists(options: GetTopOptions, callback: SpotifyWebApi.Callback<SpotifyApi.UsersTopArtistsResponse>): void;
+    getMyTopArtists(options?: GetTopOptions): Promise<SpotifyWebApi.Response<SpotifyApi.UsersTopArtistsResponse>>;
 
     /**
      * Get the current user's top tracks based on calculated affinity.
@@ -560,8 +560,8 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful, resolves into a paging object of tracks,
      *          otherwise an error. Not returned if a callback is given.
      */
-    getMyTopTracks(options: GetTopOptions, callback: Callback<SpotifyApi.UsersTopTracksResponse>): void;
-    getMyTopTracks(options?: GetTopOptions): Promise<Response<SpotifyApi.UsersTopTracksResponse>>;
+    getMyTopTracks(options: GetTopOptions, callback: SpotifyWebApi.Callback<SpotifyApi.UsersTopTracksResponse>): void;
+    getMyTopTracks(options?: GetTopOptions): Promise<SpotifyWebApi.Response<SpotifyApi.UsersTopTracksResponse>>;
 
     /**
      * Get the Current User's Recently Played Tracks
@@ -570,8 +570,8 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful, resolves into a paging object of tracks,
      *          otherwise an error. Not returned if a callback is given.
      */
-    getMyRecentlyPlayedTracks(options: BeforeOptions | AfterOptions, callback: Callback<SpotifyApi.UsersRecentlyPlayedTracksResponse>): void;
-    getMyRecentlyPlayedTracks(options?: BeforeOptions | AfterOptions): Promise<Response<SpotifyApi.UsersRecentlyPlayedTracksResponse>>;
+    getMyRecentlyPlayedTracks(options: BeforeOptions | AfterOptions, callback: SpotifyWebApi.Callback<SpotifyApi.UsersRecentlyPlayedTracksResponse>): void;
+    getMyRecentlyPlayedTracks(options?: BeforeOptions | AfterOptions): Promise<SpotifyWebApi.Response<SpotifyApi.UsersRecentlyPlayedTracksResponse>>;
 
     /**
      * Get the Current User's Connect Devices
@@ -579,8 +579,8 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful, resolves into a paging object of tracks,
      *          otherwise an error. Not returned if a callback is given.
      */
-    getMyDevices(callback: Callback<SpotifyApi.UserDevicesResponse>): void;
-    getMyDevices(): Promise<Response<SpotifyApi.UserDevicesResponse>>;
+    getMyDevices(callback: SpotifyWebApi.Callback<SpotifyApi.UserDevicesResponse>): void;
+    getMyDevices(): Promise<SpotifyWebApi.Response<SpotifyApi.UserDevicesResponse>>;
 
     /**
      * Get the Current User's Currently Playing Track.
@@ -589,8 +589,8 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful, resolves into a paging object of tracks,
      *          otherwise an error. Not returned if a callback is given.
      */
-    getMyCurrentPlayingTrack(options: MarketOptions, callback: Callback<SpotifyApi.CurrentlyPlayingResponse>): void;
-    getMyCurrentPlayingTrack(options?: MarketOptions): Promise<Response<SpotifyApi.CurrentlyPlayingResponse>>;
+    getMyCurrentPlayingTrack(options: MarketOptions, callback: SpotifyWebApi.Callback<SpotifyApi.CurrentlyPlayingResponse>): void;
+    getMyCurrentPlayingTrack(options?: MarketOptions): Promise<SpotifyWebApi.Response<SpotifyApi.CurrentlyPlayingResponse>>;
 
     /**
      * Get the Current User's Current Playback State
@@ -599,8 +599,8 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful, resolves into a paging object of tracks,
      *          otherwise an error. Not returned if a callback is given.
      */
-    getMyCurrentPlaybackState(options: MarketOptions, callback: Callback<SpotifyApi.CurrentPlaybackResponse>): void;
-    getMyCurrentPlaybackState(options?: MarketOptions): Promise<Response<SpotifyApi.CurrentPlaybackResponse>>;
+    getMyCurrentPlaybackState(options: MarketOptions, callback: SpotifyWebApi.Callback<SpotifyApi.CurrentPlaybackResponse>): void;
+    getMyCurrentPlaybackState(options?: MarketOptions): Promise<SpotifyWebApi.Response<SpotifyApi.CurrentPlaybackResponse>>;
 
     /**
      * Transfer a User's Playback
@@ -609,8 +609,8 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful, resolves into a paging object of tracks,
      *          otherwise an error. Not returned if a callback is given.
      */
-    transferMyPlayback(options: TransferPlaybackOptions, callback: Callback<void>): void;
-    transferMyPlayback(options?: TransferPlaybackOptions): Promise<Response<void>>;
+    transferMyPlayback(options: TransferPlaybackOptions, callback: SpotifyWebApi.Callback<void>): void;
+    transferMyPlayback(options?: TransferPlaybackOptions): Promise<SpotifyWebApi.Response<void>>;
 
     /**
      * Starts or Resumes the Current User's Playback
@@ -620,8 +620,8 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful, resolves into a paging object of tracks,
      *          otherwise an error. Not returned if a callback is given.
      */
-    play(options: PlayOptions, callback: Callback<void>): void;
-    play(options?: PlayOptions): Promise<Response<void>>;
+    play(options: PlayOptions, callback: SpotifyWebApi.Callback<void>): void;
+    play(options?: PlayOptions): Promise<SpotifyWebApi.Response<void>>;
 
     /**
      * Pauses the Current User's Playback
@@ -631,8 +631,8 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful, resolves into a paging object of tracks,
      *          otherwise an error. Not returned if a callback is given.
      */
-    pause(options: DeviceOptions, callback: Callback<void>): void;
-    pause(options?: DeviceOptions): Promise<Response<void>>;
+    pause(options: DeviceOptions, callback: SpotifyWebApi.Callback<void>): void;
+    pause(options?: DeviceOptions): Promise<SpotifyWebApi.Response<void>>;
 
     /**
      * Skip the Current User's Playback To Previous Track
@@ -641,8 +641,8 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful, resolves into a paging object of tracks,
      *          otherwise an error. Not returned if a callback is given.
      */
-    skipToPrevious(callback: Callback<void>): void;
-    skipToPrevious(): Promise<Response<void>>;
+    skipToPrevious(callback: SpotifyWebApi.Callback<void>): void;
+    skipToPrevious(): Promise<SpotifyWebApi.Response<void>>;
 
     /**
      * Skip the Current User's Playback To Next Track
@@ -651,8 +651,8 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful, resolves into a paging object of tracks,
      *          otherwise an error. Not returned if a callback is given.
      */
-    skipToNext(callback: Callback<void>): void;
-    skipToNext(): Promise<Response<void>>;
+    skipToNext(callback: SpotifyWebApi.Callback<void>): void;
+    skipToNext(): Promise<SpotifyWebApi.Response<void>>;
 
     /**
      * Seeks to the given position in the user’s currently playing track.
@@ -663,8 +663,8 @@ declare class SpotifyWebApi {
      * one is the error object (null if no error), and the second is the value if the request succeeded.
      * @returns Null if a callback is provided, a Promise otherwise
      */
-    seek(positionMs: number, options: DeviceOptions, callback: Callback<void>): void;
-    seek(positionMs: number, options?: DeviceOptions): Promise<Response<void>>;
+    seek(positionMs: number, options: DeviceOptions, callback: SpotifyWebApi.Callback<void>): void;
+    seek(positionMs: number, options?: DeviceOptions): Promise<SpotifyWebApi.Response<void>>;
 
     /**
      * Set Repeat Mode On The Current User's Playback
@@ -674,8 +674,8 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful, resolves into a paging object of tracks,
      *          otherwise an error. Not returned if a callback is given.
      */
-    setRepeat(options: RepeatOptions, callback: Callback<void>): void;
-    setRepeat(options?: RepeatOptions): Promise<Response<void>>;
+    setRepeat(options: RepeatOptions, callback: SpotifyWebApi.Callback<void>): void;
+    setRepeat(options?: RepeatOptions): Promise<SpotifyWebApi.Response<void>>;
 
     /**
      * Set Shuffle Mode On The Current User's Playback
@@ -685,8 +685,8 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful, resolves into a paging object of tracks,
      *          otherwise an error. Not returned if a callback is given.
      */
-    setShuffle(options: ShuffleOptions, callback: Callback<void>): void;
-    setShuffle(options?: ShuffleOptions): Promise<Response<void>>;
+    setShuffle(options: ShuffleOptions, callback: SpotifyWebApi.Callback<void>): void;
+    setShuffle(options?: ShuffleOptions): Promise<SpotifyWebApi.Response<void>>;
 
     /**
      * Set the volume for the user’s current playback device.
@@ -697,8 +697,8 @@ declare class SpotifyWebApi {
      * one is the error object (null if no error), and the second is the value if the request succeeded.
      * @returns nothing if callback is provided, a Promise otherwise
      */
-    setVolume(volumePercent: number, options: DeviceOptions, callback: Callback<void>): void;
-    setVolume(volumePercent: number, options?: DeviceOptions): Promise<Response<void>>;
+    setVolume(volumePercent: number, options: DeviceOptions, callback: SpotifyWebApi.Callback<void>): void;
+    setVolume(volumePercent: number, options?: DeviceOptions): Promise<SpotifyWebApi.Response<void>>;
 
     /**
      * Add the current user as a follower of one or more other Spotify users.
@@ -708,8 +708,8 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful, simply resolves to an empty object. If rejected,
      *          it contains an error object. Not returned if a callback is given.
      */
-    followUsers(userIds: ReadonlyArray<string>, callback: Callback<void>): void;
-    followUsers(userIds: ReadonlyArray<string>): Promise<Response<void>>;
+    followUsers(userIds: ReadonlyArray<string>, callback: SpotifyWebApi.Callback<void>): void;
+    followUsers(userIds: ReadonlyArray<string>): Promise<SpotifyWebApi.Response<void>>;
 
     /**
      * Add the current user as a follower of one or more artists.
@@ -719,8 +719,8 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful, simply resolves to an empty object. If rejected,
      *          it contains an error object. Not returned if a callback is given.
      */
-    followArtists(artistIds: ReadonlyArray<string>, callback: Callback<void>): void;
-    followArtists(artistIds: ReadonlyArray<string>): Promise<Response<void>>;
+    followArtists(artistIds: ReadonlyArray<string>, callback: SpotifyWebApi.Callback<void>): void;
+    followArtists(artistIds: ReadonlyArray<string>): Promise<SpotifyWebApi.Response<void>>;
 
     /**
      * Remove the current user as a follower of one or more other Spotify users.
@@ -730,8 +730,8 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful, simply resolves to an empty object. If rejected,
      *          it contains an error object. Not returned if a callback is given.
      */
-    unfollowUsers(userIds: ReadonlyArray<string>, callback: Callback<void>): void;
-    unfollowUsers(userIds: ReadonlyArray<string>): Promise<Response<void>>;
+    unfollowUsers(userIds: ReadonlyArray<string>, callback: SpotifyWebApi.Callback<void>): void;
+    unfollowUsers(userIds: ReadonlyArray<string>): Promise<SpotifyWebApi.Response<void>>;
 
     /**
      * Remove the current user as a follower of one or more artists.
@@ -741,8 +741,8 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful, simply resolves to an empty object. If rejected,
      *          it contains an error object. Not returned if a callback is given.
      */
-    unfollowArtists(artistIds: ReadonlyArray<string>, callback: Callback<void>): void;
-    unfollowArtists(artistIds: ReadonlyArray<string>): Promise<Response<void>>;
+    unfollowArtists(artistIds: ReadonlyArray<string>, callback: SpotifyWebApi.Callback<void>): void;
+    unfollowArtists(artistIds: ReadonlyArray<string>): Promise<SpotifyWebApi.Response<void>>;
 
     /**
      * Check to see if the current user is following one or more other Spotify users.
@@ -754,8 +754,8 @@ declare class SpotifyWebApi {
      *          The boolean value of true indicates that the user is following that user, otherwise is not.
      *          Not returned if a callback is given.
      */
-    isFollowingUsers(userIds: ReadonlyArray<string>, callback: Callback<SpotifyApi.UserFollowsUsersOrArtistsResponse>): void;
-    isFollowingUsers(userIds: ReadonlyArray<string>): Promise<Response<SpotifyApi.UserFollowsUsersOrArtistsResponse>>;
+    isFollowingUsers(userIds: ReadonlyArray<string>, callback: SpotifyWebApi.Callback<SpotifyApi.UserFollowsUsersOrArtistsResponse>): void;
+    isFollowingUsers(userIds: ReadonlyArray<string>): Promise<SpotifyWebApi.Response<SpotifyApi.UserFollowsUsersOrArtistsResponse>>;
 
     /**
      * Get the current user's followed artists.
@@ -764,8 +764,8 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful, resolves to an object containing a paging object which contains
      * album objects. Not returned if a callback is given.
      */
-    getFollowedArtists(options: AfterOptions, callback: Callback<SpotifyApi.UsersFollowedArtistsResponse>): void;
-    getFollowedArtists(options?: AfterOptions): Promise<Response<SpotifyApi.UsersFollowedArtistsResponse>>;
+    getFollowedArtists(options: AfterOptions, callback: SpotifyWebApi.Callback<SpotifyApi.UsersFollowedArtistsResponse>): void;
+    getFollowedArtists(options?: AfterOptions): Promise<SpotifyWebApi.Response<SpotifyApi.UsersFollowedArtistsResponse>>;
 
     /**
      * Check if users are following a playlist.
@@ -776,8 +776,8 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful returns an array of booleans. If rejected,
      * it contains an error object. Not returned if a callback is given.
      */
-    areFollowingPlaylist(userId: string, playlistId: string, followerIds: ReadonlyArray<string>, callback: Callback<SpotifyApi.UsersFollowPlaylistReponse>): void;
-    areFollowingPlaylist(userId: string, playlistId: string, followerIds: ReadonlyArray<string>): Promise<Response<SpotifyApi.UsersFollowPlaylistReponse>>;
+    areFollowingPlaylist(userId: string, playlistId: string, followerIds: ReadonlyArray<string>, callback: SpotifyWebApi.Callback<SpotifyApi.UsersFollowPlaylistReponse>): void;
+    areFollowingPlaylist(userId: string, playlistId: string, followerIds: ReadonlyArray<string>): Promise<SpotifyWebApi.Response<SpotifyApi.UsersFollowPlaylistReponse>>;
 
     /**
      * Check to see if the current user is following one or more artists.
@@ -789,8 +789,8 @@ declare class SpotifyWebApi {
      *          The boolean value of true indicates that the user is following that artist, otherwise is not.
      *          Not returned if a callback is given.
      */
-    isFollowingArtists(artistIds: ReadonlyArray<string>, callback: Callback<SpotifyApi.UserFollowsUsersOrArtistsResponse>): void;
-    isFollowingArtists(artistIds: ReadonlyArray<string>): Promise<Response<SpotifyApi.UserFollowsUsersOrArtistsResponse>>;
+    isFollowingArtists(artistIds: ReadonlyArray<string>, callback: SpotifyWebApi.Callback<SpotifyApi.UserFollowsUsersOrArtistsResponse>): void;
+    isFollowingArtists(artistIds: ReadonlyArray<string>): Promise<SpotifyWebApi.Response<SpotifyApi.UserFollowsUsersOrArtistsResponse>>;
 
     /**
      * Retrieve new releases
@@ -799,8 +799,8 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful, resolves to an object containing a paging object which contains
      * album objects. Not returned if a callback is given.
      */
-    getNewReleases(options: PaginationCountryOptions, callback: Callback<SpotifyApi.ListOfNewReleasesResponse>): void;
-    getNewReleases(options?: PaginationCountryOptions): Promise<Response<SpotifyApi.ListOfNewReleasesResponse>>;
+    getNewReleases(options: PaginationCountryOptions, callback: SpotifyWebApi.Callback<SpotifyApi.ListOfNewReleasesResponse>): void;
+    getNewReleases(options?: PaginationCountryOptions): Promise<SpotifyWebApi.Response<SpotifyApi.ListOfNewReleasesResponse>>;
 
     /**
      * Retrieve featured playlists
@@ -809,8 +809,8 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful, resolves to an object containing a paging object which contains
      * featured playlists. Not returned if a callback is given.
      */
-    getFeaturedPlaylists(options: GetFeaturedPlaylistsOptions, callback: Callback<SpotifyApi.ListOfFeaturedPlaylistsResponse>): void;
-    getFeaturedPlaylists(options?: GetFeaturedPlaylistsOptions): Promise<Response<SpotifyApi.ListOfFeaturedPlaylistsResponse>>;
+    getFeaturedPlaylists(options: GetFeaturedPlaylistsOptions, callback: SpotifyWebApi.Callback<SpotifyApi.ListOfFeaturedPlaylistsResponse>): void;
+    getFeaturedPlaylists(options?: GetFeaturedPlaylistsOptions): Promise<SpotifyWebApi.Response<SpotifyApi.ListOfFeaturedPlaylistsResponse>>;
 
     /**
      * Retrieve a list of categories used to tag items in Spotify (e.g. in the 'Browse' tab)
@@ -819,8 +819,8 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful, resolves to an object containing a paging object of categories.
      * Not returned if a callback is given.
      */
-    getCategories(options: PaginationLocaleOptions, callback: Callback<SpotifyApi.MultipleCategoriesResponse>): void;
-    getCategories(options?: PaginationLocaleOptions): Promise<Response<SpotifyApi.MultipleCategoriesResponse>>;
+    getCategories(options: PaginationLocaleOptions, callback: SpotifyWebApi.Callback<SpotifyApi.MultipleCategoriesResponse>): void;
+    getCategories(options?: PaginationLocaleOptions): Promise<SpotifyWebApi.Response<SpotifyApi.MultipleCategoriesResponse>>;
 
     /**
      * Retrieve a category.
@@ -830,8 +830,8 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful, resolves to an object containing a category object.
      * Not returned if a callback is given.
      */
-    getCategory(categoryId: string, options: LocaleOptions, callback: Callback<SpotifyApi.SingleCategoryResponse>): void;
-    getCategory(categoryId: string, options?: LocaleOptions): Promise<Response<SpotifyApi.SingleCategoryResponse>>;
+    getCategory(categoryId: string, options: LocaleOptions, callback: SpotifyWebApi.Callback<SpotifyApi.SingleCategoryResponse>): void;
+    getCategory(categoryId: string, options?: LocaleOptions): Promise<SpotifyWebApi.Response<SpotifyApi.SingleCategoryResponse>>;
 
     /**
      * Retrieve playlists for a category.
@@ -841,8 +841,8 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful, resolves to a paging object containing simple playlists.
      * Not returned if a callback is given.
      */
-    getPlaylistsForCategory(categoryId: string, options: PaginationCountryOptions, callback: Callback<SpotifyApi.CategoryPlaylistsReponse>): void;
-    getPlaylistsForCategory(categoryId: string, options?: PaginationCountryOptions): Promise<Response<SpotifyApi.CategoryPlaylistsReponse>>;
+    getPlaylistsForCategory(categoryId: string, options: PaginationCountryOptions, callback: SpotifyWebApi.Callback<SpotifyApi.CategoryPlaylistsReponse>): void;
+    getPlaylistsForCategory(categoryId: string, options?: PaginationCountryOptions): Promise<SpotifyWebApi.Response<SpotifyApi.CategoryPlaylistsReponse>>;
 
     /**
      * Request an access token using the Client Credentials flow.
@@ -852,8 +852,8 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful, resolves into an object containing the access token,
      *          token type and time to expiration. If rejected, it contains an error object. Not returned if a callback is given.
      */
-    clientCredentialsGrant(options: {}, callback: Callback<ClientCredentialsGrantResponse>): void;
-    clientCredentialsGrant(options?: {}): Promise<Response<ClientCredentialsGrantResponse>>;
+    clientCredentialsGrant(options: {}, callback: SpotifyWebApi.Callback<SpotifyWebApi.ClientCredentialsGrantResponse>): void;
+    clientCredentialsGrant(options?: {}): Promise<SpotifyWebApi.Response<SpotifyWebApi.ClientCredentialsGrantResponse>>;
 
     /**
      * Request an access token using the Authorization Code flow.
@@ -864,8 +864,8 @@ declare class SpotifyWebApi {
      *          refresh token, token type and time to expiration. If rejected, it contains an error object.
      *          Not returned if a callback is given.
      */
-    authorizationCodeGrant(code: string, callback: Callback<AuthorizationCodeGrantResponse>): void;
-    authorizationCodeGrant(code: string): Promise<Response<AuthorizationCodeGrantResponse>>;
+    authorizationCodeGrant(code: string, callback: SpotifyWebApi.Callback<SpotifyWebApi.AuthorizationCodeGrantResponse>): void;
+    authorizationCodeGrant(code: string): Promise<SpotifyWebApi.Response<SpotifyWebApi.AuthorizationCodeGrantResponse>>;
 
     /**
      * Refresh the access token given that it hasn't expired.
@@ -875,16 +875,51 @@ declare class SpotifyWebApi {
      *          access token, time to expiration and token type. If rejected, it contains an error object.
      *          Not returned if a callback is given.
      */
-    refreshAccessToken(callback: Callback<RefreshAccessTokenResponse>): void;
-    refreshAccessToken(): Promise<Response<RefreshAccessTokenResponse>>;
+    refreshAccessToken(callback: SpotifyWebApi.Callback<SpotifyWebApi.RefreshAccessTokenResponse>): void;
+    refreshAccessToken(): Promise<SpotifyWebApi.Response<SpotifyWebApi.RefreshAccessTokenResponse>>;
 }
 
-type Callback<T> = (error: Error, response: Response<T>) => void;
+declare namespace SpotifyWebApi {
+    type Callback<T> = (error: Error, response: Response<T>) => void;
 
-interface Response<T> {
-    body: T;
-    headers: Record<string, string>;
-    statusCode: number;
+    interface Response<T> {
+        body: T;
+        headers: Record<string, string>;
+        statusCode: number;
+    }
+
+    /**
+     * Response returned when using Client Credentials authentication flow
+     * https://developer.spotify.com/documentation/general/guides/authorization-guide/#example-4
+     */
+    interface ClientCredentialsGrantResponse {
+        access_token: string;
+        expires_in: number;
+        token_type: string;
+    }
+
+    /**
+     * Response returned when requesting for access token
+     * https://developer.spotify.com/documentation/general/guides/authorization-guide/#2-have-your-application-request-refresh-and-access-tokens-spotify-returns-access-and-refresh-tokens
+     */
+    interface AuthorizationCodeGrantResponse {
+        access_token: string;
+        expires_in: number;
+        refresh_token: string;
+        scope: string;
+        token_type: string;
+    }
+
+    /**
+     * Response returned when requesting new access token (via refresh token)
+     * https://developer.spotify.com/documentation/general/guides/authorization-guide/#4-requesting-a-refreshed-access-token-spotify-returns-a-new-access-token-to-your-app
+     */
+    interface RefreshAccessTokenResponse {
+        access_token: string;
+        expires_in: number;
+        scope: string;
+        token_type: string;
+    }
 }
 
 interface Credentials {
@@ -1057,37 +1092,4 @@ interface GetFeaturedPlaylistsOptions extends PaginationLocaleOptions {
     timestamp?: string;
 }
 
-/**
- * Response returned when using Client Credentials authentication flow
- * https://developer.spotify.com/documentation/general/guides/authorization-guide/#example-4
- */
-interface ClientCredentialsGrantResponse {
-    access_token: string;
-    expires_in: number;
-    token_type: string;
-}
-
-/**
- * Response returned when requesting for access token
- * https://developer.spotify.com/documentation/general/guides/authorization-guide/#2-have-your-application-request-refresh-and-access-tokens-spotify-returns-access-and-refresh-tokens
- */
-interface AuthorizationCodeGrantResponse {
-    access_token: string;
-    expires_in: number;
-    refresh_token: string;
-    scope: string;
-    token_type: string;
-}
-
-/**
- * Response returned when requesting new access token (via refresh token)
- * https://developer.spotify.com/documentation/general/guides/authorization-guide/#4-requesting-a-refreshed-access-token-spotify-returns-a-new-access-token-to-your-app
- */
-interface RefreshAccessTokenResponse {
-    access_token: string;
-    expires_in: number;
-    scope: string;
-    token_type: string;
-}
-
 export = SpotifyWebApi;
