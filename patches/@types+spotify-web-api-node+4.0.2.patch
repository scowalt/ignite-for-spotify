diff --git a/node_modules/@types/spotify-web-api-node/index.d.ts b/node_modules/@types/spotify-web-api-node/index.d.ts
index 3fb62ab..d2241de 100644
--- a/node_modules/@types/spotify-web-api-node/index.d.ts
+++ b/node_modules/@types/spotify-web-api-node/index.d.ts
@@ -43,7 +43,7 @@ declare class SpotifyWebApi {
      *          about the track. Not returned if a callback is given.
      */
     getTrack(trackId: string, options: MarketOptions, callback: Callback<SpotifyApi.SingleTrackResponse>): void;
-    getTrack(trackId: string, options?: MarketOptions): Promise<Response<SpotifyApi.SingleTrackResponse>>;
+    getTrack(trackId: string, options?: MarketOptions): Promise<SpotifyWebApi.Response<SpotifyApi.SingleTrackResponse>>;
 
     /**
      * Look up several tracks.
@@ -55,7 +55,7 @@ declare class SpotifyWebApi {
      *          about the artists. Not returned if a callback is given.
      */
     getTracks(trackIds: ReadonlyArray<string>, options: MarketOptions, callback: Callback<SpotifyApi.MultipleTracksResponse>): void;
-    getTracks(trackIds: ReadonlyArray<string>, options?: MarketOptions): Promise<Response<SpotifyApi.MultipleTracksResponse>>;
+    getTracks(trackIds: ReadonlyArray<string>, options?: MarketOptions): Promise<SpotifyWebApi.Response<SpotifyApi.MultipleTracksResponse>>;
 
     /**
      * Look up an album.
@@ -67,7 +67,7 @@ declare class SpotifyWebApi {
      *          about the album. Not returned if a callback is given.
      */
     getAlbum(albumId: string, options: MarketOptions, callback: Callback<SpotifyApi.SingleAlbumResponse>): void;
-    getAlbum(albumId: string, options?: MarketOptions): Promise<Response<SpotifyApi.SingleAlbumResponse>>;
+    getAlbum(albumId: string, options?: MarketOptions): Promise<SpotifyWebApi.Response<SpotifyApi.SingleAlbumResponse>>;
 
     /**
      * Look up several albums.
@@ -79,7 +79,7 @@ declare class SpotifyWebApi {
      *          about the albums. Not returned if a callback is given.
      */
     getAlbums(albumIds: ReadonlyArray<string>, options: MarketOptions, callback: Callback<SpotifyApi.MultipleAlbumsResponse>): void;
-    getAlbums(albumIds: ReadonlyArray<string>, options?: MarketOptions): Promise<Response<SpotifyApi.MultipleAlbumsResponse>>;
+    getAlbums(albumIds: ReadonlyArray<string>, options?: MarketOptions): Promise<SpotifyWebApi.Response<SpotifyApi.MultipleAlbumsResponse>>;
 
     /**
      * Look up an artist.
@@ -90,7 +90,7 @@ declare class SpotifyWebApi {
      *          about the artist. Not returned if a callback is given.
      */
     getArtist(artistId: string, callback: Callback<SpotifyApi.SingleArtistResponse>): void;
-    getArtist(artistId: string): Promise<Response<SpotifyApi.SingleArtistResponse>>;
+    getArtist(artistId: string): Promise<SpotifyWebApi.Response<SpotifyApi.SingleArtistResponse>>;
 
     /**
      * Look up several artists.
@@ -101,7 +101,7 @@ declare class SpotifyWebApi {
      *          about the artists. Not returned if a callback is given.
      */
     getArtists(artistIds: ReadonlyArray<string>, callback: Callback<SpotifyApi.MultipleArtistsResponse>): void;
-    getArtists(artistIds: ReadonlyArray<string>): Promise<Response<SpotifyApi.MultipleArtistsResponse>>;
+    getArtists(artistIds: ReadonlyArray<string>): Promise<SpotifyWebApi.Response<SpotifyApi.MultipleArtistsResponse>>;
 
     /**
      * Search for music entities of certain types.
@@ -116,7 +116,7 @@ declare class SpotifyWebApi {
      *          it contains an error object. Not returned if a callback is given.
      */
     search(query: string, types: ReadonlyArray<SearchType>, options: SearchOptions, callback: Callback<SpotifyApi.SearchResponse>): void;
-    search(query: string, types: ReadonlyArray<SearchType>, options?: SearchOptions): Promise<Response<SpotifyApi.SearchResponse>>;
+    search(query: string, types: ReadonlyArray<SearchType>, options?: SearchOptions): Promise<SpotifyWebApi.Response<SpotifyApi.SearchResponse>>;
 
     /**
      * Search for an album.
@@ -129,7 +129,7 @@ declare class SpotifyWebApi {
      *          it contains an error object. Not returned if a callback is given.
      */
     searchAlbums(query: string, options: SearchOptions, callback: Callback<SpotifyApi.SearchResponse>): void;
-    searchAlbums(query: string, options?: SearchOptions): Promise<Response<SpotifyApi.SearchResponse>>;
+    searchAlbums(query: string, options?: SearchOptions): Promise<SpotifyWebApi.Response<SpotifyApi.SearchResponse>>;
 
     /**
      * Search for an artist.
@@ -142,7 +142,7 @@ declare class SpotifyWebApi {
      *          it contains an error object. Not returned if a callback is given.
      */
     searchArtists(query: string, options: SearchOptions, callback: Callback<SpotifyApi.SearchResponse>): void;
-    searchArtists(query: string, options?: SearchOptions): Promise<Response<SpotifyApi.SearchResponse>>;
+    searchArtists(query: string, options?: SearchOptions): Promise<SpotifyWebApi.Response<SpotifyApi.SearchResponse>>;
 
     /**
      * Search for a track.
@@ -155,7 +155,7 @@ declare class SpotifyWebApi {
      *          it contains an error object. Not returned if a callback is given.
      */
     searchTracks(query: string, options: SearchOptions, callback: Callback<SpotifyApi.SearchResponse>): void;
-    searchTracks(query: string, options?: SearchOptions): Promise<Response<SpotifyApi.SearchResponse>>;
+    searchTracks(query: string, options?: SearchOptions): Promise<SpotifyWebApi.Response<SpotifyApi.SearchResponse>>;
 
     /**
      * Search for playlists.
@@ -168,7 +168,7 @@ declare class SpotifyWebApi {
      *          it contains an error object. Not returned if a callback is given.
      */
     searchPlaylists(query: string, options: SearchOptions, callback: Callback<SpotifyApi.SearchResponse>): void;
-    searchPlaylists(query: string, options?: SearchOptions): Promise<Response<SpotifyApi.SearchResponse>>;
+    searchPlaylists(query: string, options?: SearchOptions): Promise<SpotifyWebApi.Response<SpotifyApi.SearchResponse>>;
 
     /**
      * Get an artist's albums.
@@ -181,7 +181,7 @@ declare class SpotifyWebApi {
      *          it contains an error object. Not returned if a callback is given.
      */
     getArtistAlbums(artistId: string, options: GetArtistAlbumsOptions, callback: Callback<SpotifyApi.ArtistsAlbumsResponse>): void;
-    getArtistAlbums(artistId: string, options?: GetArtistAlbumsOptions): Promise<Response<SpotifyApi.ArtistsAlbumsResponse>>;
+    getArtistAlbums(artistId: string, options?: GetArtistAlbumsOptions): Promise<SpotifyWebApi.Response<SpotifyApi.ArtistsAlbumsResponse>>;
 
     /**
      * Get the tracks of an album.
@@ -194,7 +194,7 @@ declare class SpotifyWebApi {
      *                    it contains an error object. Not returned if a callback is given.
      */
     getAlbumTracks(albumId: string, options: PaginationMarketOptions, callback: Callback<SpotifyApi.AlbumTracksResponse>): void;
-    getAlbumTracks(albumId: string, options?: PaginationMarketOptions): Promise<Response<SpotifyApi.AlbumTracksResponse>>;
+    getAlbumTracks(albumId: string, options?: PaginationMarketOptions): Promise<SpotifyWebApi.Response<SpotifyApi.AlbumTracksResponse>>;
 
     /**
      * Get an artist's top tracks.
@@ -207,7 +207,7 @@ declare class SpotifyWebApi {
      *          it contains an error object. Not returned if a callback is given.
      */
     getArtistTopTracks(artistId: string, country: string, callback: Callback<SpotifyApi.ArtistsTopTracksResponse>): void;
-    getArtistTopTracks(artistId: string, country: string): Promise<Response<SpotifyApi.ArtistsTopTracksResponse>>;
+    getArtistTopTracks(artistId: string, country: string): Promise<SpotifyWebApi.Response<SpotifyApi.ArtistsTopTracksResponse>>;
 
     /**
      * Get related artists.
@@ -218,7 +218,7 @@ declare class SpotifyWebApi {
      *          related artists. If the promise is rejected, it contains an error object. Not returned if a callback is given.
      */
     getArtistRelatedArtists(artistId: string, callback: Callback<SpotifyApi.ArtistsRelatedArtistsResponse>): void;
-    getArtistRelatedArtists(artistId: string): Promise<Response<SpotifyApi.ArtistsRelatedArtistsResponse>>;
+    getArtistRelatedArtists(artistId: string): Promise<SpotifyWebApi.Response<SpotifyApi.ArtistsRelatedArtistsResponse>>;
 
     /**
      * Get information about a user.
@@ -230,7 +230,7 @@ declare class SpotifyWebApi {
      *          rejected, it contains an error object. Not returned if a callback is given.
      */
     getUser(userId: string, callback: Callback<SpotifyApi.UserProfileResponse>): void;
-    getUser(userId: string): Promise<Response<SpotifyApi.UserProfileResponse>>;
+    getUser(userId: string): Promise<SpotifyWebApi.Response<SpotifyApi.UserProfileResponse>>;
 
     /**
      * Get information about the user that has signed in (the current user).
@@ -242,7 +242,7 @@ declare class SpotifyWebApi {
      *          rejected, it contains an error object. Not returned if a callback is given.
      */
     getMe(callback: Callback<SpotifyApi.CurrentUsersProfileResponse>): void;
-    getMe(): Promise<Response<SpotifyApi.CurrentUsersProfileResponse>>;
+    getMe(): Promise<SpotifyWebApi.Response<SpotifyApi.CurrentUsersProfileResponse>>;
 
     /**
      * Get a user's playlists.
@@ -257,8 +257,8 @@ declare class SpotifyWebApi {
      */
     getUserPlaylists(userId: string, options: PaginationOptions, callback: Callback<SpotifyApi.ListOfUsersPlaylistsResponse>): void;
     getUserPlaylists(options: PaginationOptions, callback: Callback<SpotifyApi.ListOfUsersPlaylistsResponse>): void;
-    getUserPlaylists(userId: string, options?: PaginationOptions): Promise<Response<SpotifyApi.ListOfUsersPlaylistsResponse>>;
-    getUserPlaylists(options?: PaginationOptions): Promise<Response<SpotifyApi.ListOfUsersPlaylistsResponse>>;
+    getUserPlaylists(userId: string, options?: PaginationOptions): Promise<SpotifyWebApi.Response<SpotifyApi.ListOfUsersPlaylistsResponse>>;
+    getUserPlaylists(options?: PaginationOptions): Promise<SpotifyWebApi.Response<SpotifyApi.ListOfUsersPlaylistsResponse>>;
 
     /**
      * Get a playlist.
@@ -270,7 +270,7 @@ declare class SpotifyWebApi {
      *          the playlist. If rejected, it contains an error object. Not returned if a callback is given.
      */
     getPlaylist(playlistId: string, options: GetPlaylistOptions, callback: Callback<SpotifyApi.SinglePlaylistResponse>): void;
-    getPlaylist(playlistId: string, options?: GetPlaylistOptions): Promise<Response<SpotifyApi.SinglePlaylistResponse>>;
+    getPlaylist(playlistId: string, options?: GetPlaylistOptions): Promise<SpotifyWebApi.Response<SpotifyApi.SinglePlaylistResponse>>;
 
     /**
      * Get tracks in a playlist.
@@ -282,7 +282,7 @@ declare class SpotifyWebApi {
      * the tracks in the playlist. If rejected, it contains an error object. Not returned if a callback is given.
      */
     getPlaylistTracks(playlistId: string, options: GetPlaylistTracksOptions, callback: Callback<SpotifyApi.PlaylistTrackResponse>): void;
-    getPlaylistTracks(playlistId: string, options?: GetPlaylistTracksOptions): Promise<Response<SpotifyApi.PlaylistTrackResponse>>;
+    getPlaylistTracks(playlistId: string, options?: GetPlaylistTracksOptions): Promise<SpotifyWebApi.Response<SpotifyApi.PlaylistTrackResponse>>;
 
     /**
      * Create a playlist.
@@ -295,7 +295,7 @@ declare class SpotifyWebApi {
      *          created playlist. If rejected, it contains an error object. Not returned if a callback is given.
      */
     createPlaylist(userId: string, playlistName: string, options: PlaylistDetailsOptions, callback: Callback<SpotifyApi.CreatePlaylistResponse>): void;
-    createPlaylist(userId: string, playlistName: string, options?: PlaylistDetailsOptions): Promise<Response<SpotifyApi.CreatePlaylistResponse>>;
+    createPlaylist(userId: string, playlistName: string, options?: PlaylistDetailsOptions): Promise<SpotifyWebApi.Response<SpotifyApi.CreatePlaylistResponse>>;
 
     /**
      * Follow a playlist.
@@ -306,7 +306,7 @@ declare class SpotifyWebApi {
      * it contains an error object. Not returned if a callback is given.
      */
     followPlaylist(playlistId: string, options: PublicOptions, callback: Callback<SpotifyApi.FollowPlaylistReponse>): void;
-    followPlaylist(playlistId: string, options?: PublicOptions): Promise<Response<SpotifyApi.FollowPlaylistReponse>>;
+    followPlaylist(playlistId: string, options?: PublicOptions): Promise<SpotifyWebApi.Response<SpotifyApi.FollowPlaylistReponse>>;
 
     /**
      * Unfollow a playlist.
@@ -317,7 +317,7 @@ declare class SpotifyWebApi {
      * it contains an error object. Not returned if a callback is given.
      */
     unfollowPlaylist(playlistId: string, callback: Callback<SpotifyApi.UnfollowPlaylistReponse>): void;
-    unfollowPlaylist(playlistId: string): Promise<Response<SpotifyApi.UnfollowPlaylistReponse>>;
+    unfollowPlaylist(playlistId: string): Promise<SpotifyWebApi.Response<SpotifyApi.UnfollowPlaylistReponse>>;
 
     /**
      * Change playlist details.
@@ -329,7 +329,7 @@ declare class SpotifyWebApi {
      * it contains an error object. Not returned if a callback is given.
      */
     changePlaylistDetails(playlistId: string, options: ChangePlaylistOptions, callback: Callback<SpotifyApi.ChangePlaylistDetailsReponse>): void;
-    changePlaylistDetails(playlistId: string, options?: ChangePlaylistOptions): Promise<Response<SpotifyApi.ChangePlaylistDetailsReponse>>;
+    changePlaylistDetails(playlistId: string, options?: ChangePlaylistOptions): Promise<SpotifyWebApi.Response<SpotifyApi.ChangePlaylistDetailsReponse>>;
 
     /**
      * Replace the image used to represent a specific playlist.
@@ -341,7 +341,7 @@ declare class SpotifyWebApi {
      * it contains an error object. Not returned if a callback is given.
      */
     uploadCustomPlaylistCoverImage(playlistId: string, base64URI: string, callback: Callback<SpotifyApi.UploadCustomPlaylistCoverImageReponse>): void;
-    uploadCustomPlaylistCoverImage(playlistId: string, base64URI: string): Promise<Response<SpotifyApi.UploadCustomPlaylistCoverImageReponse>>;
+    uploadCustomPlaylistCoverImage(playlistId: string, base64URI: string): Promise<SpotifyWebApi.Response<SpotifyApi.UploadCustomPlaylistCoverImageReponse>>;
 
     /**
      * Add tracks to a playlist.
@@ -354,7 +354,7 @@ declare class SpotifyWebApi {
      * it contains an error object. Not returned if a callback is given.
      */
     addTracksToPlaylist(playlistId: string, tracks: ReadonlyArray<string>, options: PositionOptions, callback: Callback<SpotifyApi.AddTracksToPlaylistResponse>): void;
-    addTracksToPlaylist(playlistId: string, tracks: ReadonlyArray<string>, options?: PositionOptions): Promise<Response<SpotifyApi.AddTracksToPlaylistResponse>>;
+    addTracksToPlaylist(playlistId: string, tracks: ReadonlyArray<string>, options?: PositionOptions): Promise<SpotifyWebApi.Response<SpotifyApi.AddTracksToPlaylistResponse>>;
 
     /**
      * Remove tracks from a playlist.
@@ -367,7 +367,7 @@ declare class SpotifyWebApi {
      * it contains an error object. Not returned if a callback is given.
      */
     removeTracksFromPlaylist(playlistId: string, tracks: ReadonlyArray<Track>, options: SnapshotOptions, callback: Callback<SpotifyApi.RemoveTracksFromPlaylistResponse>): void;
-    removeTracksFromPlaylist(playlistId: string, tracks: ReadonlyArray<Track>, options?: SnapshotOptions): Promise<Response<SpotifyApi.RemoveTracksFromPlaylistResponse>>;
+    removeTracksFromPlaylist(playlistId: string, tracks: ReadonlyArray<Track>, options?: SnapshotOptions): Promise<SpotifyWebApi.Response<SpotifyApi.RemoveTracksFromPlaylistResponse>>;
 
     /**
      * Remove tracks from a playlist by position instead of specifying the tracks' URIs.
@@ -379,7 +379,7 @@ declare class SpotifyWebApi {
      * it contains an error object. Not returned if a callback is given.
      */
     removeTracksFromPlaylistByPosition(playlistId: string, positions: ReadonlyArray<number>, snapshotId: string, callback: Callback<SpotifyApi.RemoveTracksFromPlaylistResponse>): void;
-    removeTracksFromPlaylistByPosition(playlistId: string, positions: ReadonlyArray<number>, snapshotId: string): Promise<Response<SpotifyApi.RemoveTracksFromPlaylistResponse>>;
+    removeTracksFromPlaylistByPosition(playlistId: string, positions: ReadonlyArray<number>, snapshotId: string): Promise<SpotifyWebApi.Response<SpotifyApi.RemoveTracksFromPlaylistResponse>>;
 
     /**
      * Replace tracks in a playlist.
@@ -390,7 +390,7 @@ declare class SpotifyWebApi {
      * it contains an error object. Not returned if a callback is given.
      */
     replaceTracksInPlaylist(playlistId: string, uris: ReadonlyArray<string>, callback: Callback<SpotifyApi.ReplacePlaylistTracksResponse>): void;
-    replaceTracksInPlaylist(playlistId: string, uris: ReadonlyArray<string>): Promise<Response<SpotifyApi.ReplacePlaylistTracksResponse>>;
+    replaceTracksInPlaylist(playlistId: string, uris: ReadonlyArray<string>): Promise<SpotifyWebApi.Response<SpotifyApi.ReplacePlaylistTracksResponse>>;
 
     /**
      * Reorder tracks in a playlist.
@@ -403,7 +403,7 @@ declare class SpotifyWebApi {
      * it contains an error object. Not returned if a callback is given.
      */
     reorderTracksInPlaylist(playlistId: string, rangeStart: number, insertBefore: number, options: ReorderPlaylistTracksOptions, callback: Callback<SpotifyApi.ReorderPlaylistTracksResponse>): void;
-    reorderTracksInPlaylist(playlistId: string, rangeStart: number, insertBefore: number, options?: ReorderPlaylistTracksOptions): Promise<Response<SpotifyApi.ReorderPlaylistTracksResponse>>;
+    reorderTracksInPlaylist(playlistId: string, rangeStart: number, insertBefore: number, options?: ReorderPlaylistTracksOptions): Promise<SpotifyWebApi.Response<SpotifyApi.ReorderPlaylistTracksResponse>>;
 
     /**
      * Get audio features for a single track identified by its unique Spotify ID.
@@ -415,7 +415,7 @@ declare class SpotifyWebApi {
      *          rejected, it contains an error object. Not returned if a callback is given.
      */
     getAudioFeaturesForTrack(trackId: string, callback: Callback<SpotifyApi.AudioFeaturesResponse>): void;
-    getAudioFeaturesForTrack(trackId: string): Promise<Response<SpotifyApi.AudioFeaturesResponse>>;
+    getAudioFeaturesForTrack(trackId: string): Promise<SpotifyWebApi.Response<SpotifyApi.AudioFeaturesResponse>>;
 
     /**
      * Get audio analysis for a single track identified by its unique Spotify ID.
@@ -427,7 +427,7 @@ declare class SpotifyWebApi {
      *          rejected, it contains an error object. Not returned if a callback is given.
      */
     getAudioAnalysisForTrack(trackId: string, callback: Callback<SpotifyApi.AudioAnalysisResponse>): void;
-    getAudioAnalysisForTrack(trackId: string): Promise<Response<SpotifyApi.AudioAnalysisResponse>>;
+    getAudioAnalysisForTrack(trackId: string): Promise<SpotifyWebApi.Response<SpotifyApi.AudioAnalysisResponse>>;
 
     /**
      * Get audio features for multiple tracks identified by their unique Spotify ID.
@@ -439,7 +439,7 @@ declare class SpotifyWebApi {
      *          rejected, it contains an error object. Not returned if a callback is given.
      */
     getAudioFeaturesForTracks(trackIds: ReadonlyArray<string>, callback: Callback<SpotifyApi.MultipleAudioFeaturesResponse>): void;
-    getAudioFeaturesForTracks(trackIds: ReadonlyArray<string>): Promise<Response<SpotifyApi.MultipleAudioFeaturesResponse>>;
+    getAudioFeaturesForTracks(trackIds: ReadonlyArray<string>): Promise<SpotifyWebApi.Response<SpotifyApi.MultipleAudioFeaturesResponse>>;
 
     /**
      * Create a playlist-style listening experience based on seed artists, tracks and genres.
@@ -450,7 +450,7 @@ declare class SpotifyWebApi {
      *          a list of tracks and a list of seeds. If rejected, it contains an error object. Not returned if a callback is given.
      */
     getRecommendations(options: GetRecommendationsOptions, callback: Callback<SpotifyApi.RecommendationsFromSeedsResponse>): void;
-    getRecommendations(options?: GetRecommendationsOptions): Promise<Response<SpotifyApi.RecommendationsFromSeedsResponse>>;
+    getRecommendations(options?: GetRecommendationsOptions): Promise<SpotifyWebApi.Response<SpotifyApi.RecommendationsFromSeedsResponse>>;
 
     /**
      * Retrieve a URL where the user can give the application permissions.
@@ -469,7 +469,7 @@ declare class SpotifyWebApi {
      *          playlist track objects. Not returned if a callback is given.
      */
     getMySavedTracks(options: PaginationMarketOptions, callback: Callback<SpotifyApi.UsersSavedTracksResponse>): void;
-    getMySavedTracks(options?: PaginationMarketOptions): Promise<Response<SpotifyApi.UsersSavedTracksResponse>>;
+    getMySavedTracks(options?: PaginationMarketOptions): Promise<SpotifyWebApi.Response<SpotifyApi.UsersSavedTracksResponse>>;
 
     /**
      * Check if one or more tracks is already saved in the current Spotify user’s “Your Music” library.
@@ -481,7 +481,7 @@ declare class SpotifyWebApi {
      * Not returned if a callback is given.
      */
     containsMySavedTracks(trackIds: ReadonlyArray<string>, callback: Callback<SpotifyApi.CheckUsersSavedTracksResponse>): void;
-    containsMySavedTracks(trackIds: ReadonlyArray<string>): Promise<Response<SpotifyApi.CheckUsersSavedTracksResponse>>;
+    containsMySavedTracks(trackIds: ReadonlyArray<string>): Promise<SpotifyWebApi.Response<SpotifyApi.CheckUsersSavedTracksResponse>>;
 
     /**
      * Remove a track from the authenticated user's Your Music library.
@@ -491,7 +491,7 @@ declare class SpotifyWebApi {
      * Not returned if a callback is given.
      */
     removeFromMySavedTracks(trackIds: ReadonlyArray<string>, callback: Callback<SpotifyApi.RemoveUsersSavedTracksResponse>): void;
-    removeFromMySavedTracks(trackIds: ReadonlyArray<string>): Promise<Response<SpotifyApi.RemoveUsersSavedTracksResponse>>;
+    removeFromMySavedTracks(trackIds: ReadonlyArray<string>): Promise<SpotifyWebApi.Response<SpotifyApi.RemoveUsersSavedTracksResponse>>;
 
     /**
      * Add a track from the authenticated user's Your Music library.
@@ -500,7 +500,7 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful returns null, otherwise an error. Not returned if a callback is given.
      */
     addToMySavedTracks(trackIds: ReadonlyArray<string>, callback: Callback<SpotifyApi.SaveTracksForUserResponse>): void;
-    addToMySavedTracks(trackIds: ReadonlyArray<string>): Promise<Response<SpotifyApi.SaveTracksForUserResponse>>;
+    addToMySavedTracks(trackIds: ReadonlyArray<string>): Promise<SpotifyWebApi.Response<SpotifyApi.SaveTracksForUserResponse>>;
 
     /**
      * Remove an album from the authenticated user's Your Music library.
@@ -510,7 +510,7 @@ declare class SpotifyWebApi {
      * Not returned if a callback is given.
      */
     removeFromMySavedAlbums(albumIds: ReadonlyArray<string>, callback: Callback<SpotifyApi.RemoveAlbumsForUserResponse>): void;
-    removeFromMySavedAlbums(albumIds: ReadonlyArray<string>): Promise<Response<SpotifyApi.RemoveAlbumsForUserResponse>>;
+    removeFromMySavedAlbums(albumIds: ReadonlyArray<string>): Promise<SpotifyWebApi.Response<SpotifyApi.RemoveAlbumsForUserResponse>>;
 
     /**
      * Add an album from the authenticated user's Your Music library.
@@ -519,7 +519,7 @@ declare class SpotifyWebApi {
      * @returns A promise that if successful returns null, otherwise an error. Not returned if a callback is given.
      */
     addToMySavedAlbums(albumIds: ReadonlyArray<string>, callback: Callback<SpotifyApi.SaveAlbumsForUserResponse>): void;
-    addToMySavedAlbums(albumIds: ReadonlyArray<string>): Promise<Response<SpotifyApi.SaveAlbumsForUserResponse>>;
+    addToMySavedAlbums(albumIds: ReadonlyArray<string>): Promise<SpotifyWebApi.Response<SpotifyApi.SaveAlbumsForUserResponse>>;
 
     /**
      * Retrieve the albums that are saved to the authenticated users Your Music library.
@@ -529,7 +529,7 @@ declare class SpotifyWebApi {
      *          playlist album objects. Not returned if a callback is given.
      */
     getMySavedAlbums(options: PaginationMarketOptions, callback: Callback<SpotifyApi.UsersSavedAlbumsResponse>): void;
-    getMySavedAlbums(options?: PaginationMarketOptions): Promise<Response<SpotifyApi.UsersSavedAlbumsResponse>>;
+    getMySavedAlbums(options?: PaginationMarketOptions): Promise<SpotifyWebApi.Response<SpotifyApi.UsersSavedAlbumsResponse>>;
 
     /**
      * Check if one or more albums is already saved in the current Spotify user’s “Your Music” library.
@@ -541,7 +541,7 @@ declare class SpotifyWebApi {
      * Not returned if a callback is given.
      */
     containsMySavedAlbums(albumIds: ReadonlyArray<string>, callback: Callback<SpotifyApi.CheckUserSavedAlbumsResponse>): void;
-    containsMySavedAlbums(albumIds: ReadonlyArray<string>): Promise<Response<SpotifyApi.CheckUserSavedAlbumsResponse>>;
+    containsMySavedAlbums(albumIds: ReadonlyArray<string>): Promise<SpotifyWebApi.Response<SpotifyApi.CheckUserSavedAlbumsResponse>>;
 
     /**
      * Get the current user's top artists based on calculated affinity.
@@ -551,7 +551,7 @@ declare class SpotifyWebApi {
      *          otherwise an error. Not returned if a callback is given.
      */
     getMyTopArtists(options: GetTopOptions, callback: Callback<SpotifyApi.UsersTopArtistsResponse>): void;
-    getMyTopArtists(options?: GetTopOptions): Promise<Response<SpotifyApi.UsersTopArtistsResponse>>;
+    getMyTopArtists(options?: GetTopOptions): Promise<SpotifyWebApi.Response<SpotifyApi.UsersTopArtistsResponse>>;
 
     /**
      * Get the current user's top tracks based on calculated affinity.
@@ -561,7 +561,7 @@ declare class SpotifyWebApi {
      *          otherwise an error. Not returned if a callback is given.
      */
     getMyTopTracks(options: GetTopOptions, callback: Callback<SpotifyApi.UsersTopTracksResponse>): void;
-    getMyTopTracks(options?: GetTopOptions): Promise<Response<SpotifyApi.UsersTopTracksResponse>>;
+    getMyTopTracks(options?: GetTopOptions): Promise<SpotifyWebApi.Response<SpotifyApi.UsersTopTracksResponse>>;
 
     /**
      * Get the Current User's Recently Played Tracks
@@ -571,7 +571,7 @@ declare class SpotifyWebApi {
      *          otherwise an error. Not returned if a callback is given.
      */
     getMyRecentlyPlayedTracks(options: BeforeOptions | AfterOptions, callback: Callback<SpotifyApi.UsersRecentlyPlayedTracksResponse>): void;
-    getMyRecentlyPlayedTracks(options?: BeforeOptions | AfterOptions): Promise<Response<SpotifyApi.UsersRecentlyPlayedTracksResponse>>;
+    getMyRecentlyPlayedTracks(options?: BeforeOptions | AfterOptions): Promise<SpotifyWebApi.Response<SpotifyApi.UsersRecentlyPlayedTracksResponse>>;
 
     /**
      * Add track or episode to device queue
@@ -579,7 +579,7 @@ declare class SpotifyWebApi {
      * @param options Options, being device_id.
      * @returns A promise that if successful returns null, otherwise an error.
      */
-    addToQueue(uri: string, options?: DeviceOptions): Promise<Response<SpotifyApi.AddToQueueResponse>>;
+    addToQueue(uri: string, options?: DeviceOptions): Promise<SpotifyWebApi.Response<SpotifyApi.AddToQueueResponse>>;
 
     /**
      * Get the Current User's Connect Devices
@@ -588,7 +588,7 @@ declare class SpotifyWebApi {
      *          otherwise an error. Not returned if a callback is given.
      */
     getMyDevices(callback: Callback<SpotifyApi.UserDevicesResponse>): void;
-    getMyDevices(): Promise<Response<SpotifyApi.UserDevicesResponse>>;
+    getMyDevices(): Promise<SpotifyWebApi.Response<SpotifyApi.UserDevicesResponse>>;
 
     /**
      * Get the Current User's Currently Playing Track.
@@ -598,7 +598,7 @@ declare class SpotifyWebApi {
      *          otherwise an error. Not returned if a callback is given.
      */
     getMyCurrentPlayingTrack(options: MarketOptions, callback: Callback<SpotifyApi.CurrentlyPlayingResponse>): void;
-    getMyCurrentPlayingTrack(options?: MarketOptions): Promise<Response<SpotifyApi.CurrentlyPlayingResponse>>;
+    getMyCurrentPlayingTrack(options?: MarketOptions): Promise<SpotifyWebApi.Response<SpotifyApi.CurrentlyPlayingResponse>>;
 
     /**
      * Get the Current User's Current Playback State
@@ -608,7 +608,7 @@ declare class SpotifyWebApi {
      *          otherwise an error. Not returned if a callback is given.
      */
     getMyCurrentPlaybackState(options: MarketOptions, callback: Callback<SpotifyApi.CurrentPlaybackResponse>): void;
-    getMyCurrentPlaybackState(options?: MarketOptions): Promise<Response<SpotifyApi.CurrentPlaybackResponse>>;
+    getMyCurrentPlaybackState(options?: MarketOptions): Promise<SpotifyWebApi.Response<SpotifyApi.CurrentPlaybackResponse>>;
 
     /**
      * Transfer a User's Playback
@@ -618,7 +618,7 @@ declare class SpotifyWebApi {
      *          otherwise an error. Not returned if a callback is given.
      */
     transferMyPlayback(options: TransferPlaybackOptions, callback: Callback<void>): void;
-    transferMyPlayback(options?: TransferPlaybackOptions): Promise<Response<void>>;
+    transferMyPlayback(options?: TransferPlaybackOptions): Promise<SpotifyWebApi.Response<void>>;
 
     /**
      * Starts or Resumes the Current User's Playback
@@ -629,7 +629,7 @@ declare class SpotifyWebApi {
      *          otherwise an error. Not returned if a callback is given.
      */
     play(options: PlayOptions, callback: Callback<void>): void;
-    play(options?: PlayOptions): Promise<Response<void>>;
+    play(options?: PlayOptions): Promise<SpotifyWebApi.Response<void>>;
 
     /**
      * Pauses the Current User's Playback
@@ -640,7 +640,7 @@ declare class SpotifyWebApi {
      *          otherwise an error. Not returned if a callback is given.
      */
     pause(options: DeviceOptions, callback: Callback<void>): void;
-    pause(options?: DeviceOptions): Promise<Response<void>>;
+    pause(options?: DeviceOptions): Promise<SpotifyWebApi.Response<void>>;
 
     /**
      * Skip the Current User's Playback To Previous Track
@@ -650,7 +650,7 @@ declare class SpotifyWebApi {
      *          otherwise an error. Not returned if a callback is given.
      */
     skipToPrevious(callback: Callback<void>): void;
-    skipToPrevious(): Promise<Response<void>>;
+    skipToPrevious(): Promise<SpotifyWebApi.Response<void>>;
 
     /**
      * Skip the Current User's Playback To Next Track
@@ -660,7 +660,7 @@ declare class SpotifyWebApi {
      *          otherwise an error. Not returned if a callback is given.
      */
     skipToNext(callback: Callback<void>): void;
-    skipToNext(): Promise<Response<void>>;
+    skipToNext(): Promise<SpotifyWebApi.Response<void>>;
 
     /**
      * Seeks to the given position in the user’s currently playing track.
@@ -672,7 +672,7 @@ declare class SpotifyWebApi {
      * @returns Null if a callback is provided, a Promise otherwise
      */
     seek(positionMs: number, options: DeviceOptions, callback: Callback<void>): void;
-    seek(positionMs: number, options?: DeviceOptions): Promise<Response<void>>;
+    seek(positionMs: number, options?: DeviceOptions): Promise<SpotifyWebApi.Response<void>>;
 
     /**
      * Set Repeat Mode On The Current User's Playback
@@ -683,7 +683,7 @@ declare class SpotifyWebApi {
      *          otherwise an error. Not returned if a callback is given.
      */
     setRepeat(options: RepeatOptions, callback: Callback<void>): void;
-    setRepeat(options?: RepeatOptions): Promise<Response<void>>;
+    setRepeat(options?: RepeatOptions): Promise<SpotifyWebApi.Response<void>>;
 
     /**
      * Set Shuffle Mode On The Current User's Playback
@@ -694,7 +694,7 @@ declare class SpotifyWebApi {
      *          otherwise an error. Not returned if a callback is given.
      */
     setShuffle(options: ShuffleOptions, callback: Callback<void>): void;
-    setShuffle(options?: ShuffleOptions): Promise<Response<void>>;
+    setShuffle(options?: ShuffleOptions): Promise<SpotifyWebApi.Response<void>>;
 
     /**
      * Set the volume for the user’s current playback device.
@@ -706,7 +706,7 @@ declare class SpotifyWebApi {
      * @returns nothing if callback is provided, a Promise otherwise
      */
     setVolume(volumePercent: number, options: DeviceOptions, callback: Callback<void>): void;
-    setVolume(volumePercent: number, options?: DeviceOptions): Promise<Response<void>>;
+    setVolume(volumePercent: number, options?: DeviceOptions): Promise<SpotifyWebApi.Response<void>>;
 
     /**
      * Add the current user as a follower of one or more other Spotify users.
@@ -717,7 +717,7 @@ declare class SpotifyWebApi {
      *          it contains an error object. Not returned if a callback is given.
      */
     followUsers(userIds: ReadonlyArray<string>, callback: Callback<void>): void;
-    followUsers(userIds: ReadonlyArray<string>): Promise<Response<void>>;
+    followUsers(userIds: ReadonlyArray<string>): Promise<SpotifyWebApi.Response<void>>;
 
     /**
      * Add the current user as a follower of one or more artists.
@@ -728,7 +728,7 @@ declare class SpotifyWebApi {
      *          it contains an error object. Not returned if a callback is given.
      */
     followArtists(artistIds: ReadonlyArray<string>, callback: Callback<void>): void;
-    followArtists(artistIds: ReadonlyArray<string>): Promise<Response<void>>;
+    followArtists(artistIds: ReadonlyArray<string>): Promise<SpotifyWebApi.Response<void>>;
 
     /**
      * Remove the current user as a follower of one or more other Spotify users.
@@ -739,7 +739,7 @@ declare class SpotifyWebApi {
      *          it contains an error object. Not returned if a callback is given.
      */
     unfollowUsers(userIds: ReadonlyArray<string>, callback: Callback<void>): void;
-    unfollowUsers(userIds: ReadonlyArray<string>): Promise<Response<void>>;
+    unfollowUsers(userIds: ReadonlyArray<string>): Promise<SpotifyWebApi.Response<void>>;
 
     /**
      * Remove the current user as a follower of one or more artists.
@@ -750,7 +750,7 @@ declare class SpotifyWebApi {
      *          it contains an error object. Not returned if a callback is given.
      */
     unfollowArtists(artistIds: ReadonlyArray<string>, callback: Callback<void>): void;
-    unfollowArtists(artistIds: ReadonlyArray<string>): Promise<Response<void>>;
+    unfollowArtists(artistIds: ReadonlyArray<string>): Promise<SpotifyWebApi.Response<void>>;
 
     /**
      * Check to see if the current user is following one or more other Spotify users.
@@ -763,7 +763,7 @@ declare class SpotifyWebApi {
      *          Not returned if a callback is given.
      */
     isFollowingUsers(userIds: ReadonlyArray<string>, callback: Callback<SpotifyApi.UserFollowsUsersOrArtistsResponse>): void;
-    isFollowingUsers(userIds: ReadonlyArray<string>): Promise<Response<SpotifyApi.UserFollowsUsersOrArtistsResponse>>;
+    isFollowingUsers(userIds: ReadonlyArray<string>): Promise<SpotifyWebApi.Response<SpotifyApi.UserFollowsUsersOrArtistsResponse>>;
 
     /**
      * Get the current user's followed artists.
@@ -773,7 +773,7 @@ declare class SpotifyWebApi {
      * album objects. Not returned if a callback is given.
      */
     getFollowedArtists(options: AfterOptions, callback: Callback<SpotifyApi.UsersFollowedArtistsResponse>): void;
-    getFollowedArtists(options?: AfterOptions): Promise<Response<SpotifyApi.UsersFollowedArtistsResponse>>;
+    getFollowedArtists(options?: AfterOptions): Promise<SpotifyWebApi.Response<SpotifyApi.UsersFollowedArtistsResponse>>;
 
     /**
      * Check if users are following a playlist.
@@ -785,7 +785,7 @@ declare class SpotifyWebApi {
      * it contains an error object. Not returned if a callback is given.
      */
     areFollowingPlaylist(userId: string, playlistId: string, followerIds: ReadonlyArray<string>, callback: Callback<SpotifyApi.UsersFollowPlaylistReponse>): void;
-    areFollowingPlaylist(userId: string, playlistId: string, followerIds: ReadonlyArray<string>): Promise<Response<SpotifyApi.UsersFollowPlaylistReponse>>;
+    areFollowingPlaylist(userId: string, playlistId: string, followerIds: ReadonlyArray<string>): Promise<SpotifyWebApi.Response<SpotifyApi.UsersFollowPlaylistReponse>>;
 
     /**
      * Check to see if the current user is following one or more artists.
@@ -798,7 +798,7 @@ declare class SpotifyWebApi {
      *          Not returned if a callback is given.
      */
     isFollowingArtists(artistIds: ReadonlyArray<string>, callback: Callback<SpotifyApi.UserFollowsUsersOrArtistsResponse>): void;
-    isFollowingArtists(artistIds: ReadonlyArray<string>): Promise<Response<SpotifyApi.UserFollowsUsersOrArtistsResponse>>;
+    isFollowingArtists(artistIds: ReadonlyArray<string>): Promise<SpotifyWebApi.Response<SpotifyApi.UserFollowsUsersOrArtistsResponse>>;
 
     /**
      * Retrieve new releases
@@ -808,7 +808,7 @@ declare class SpotifyWebApi {
      * album objects. Not returned if a callback is given.
      */
     getNewReleases(options: PaginationCountryOptions, callback: Callback<SpotifyApi.ListOfNewReleasesResponse>): void;
-    getNewReleases(options?: PaginationCountryOptions): Promise<Response<SpotifyApi.ListOfNewReleasesResponse>>;
+    getNewReleases(options?: PaginationCountryOptions): Promise<SpotifyWebApi.Response<SpotifyApi.ListOfNewReleasesResponse>>;
 
     /**
      * Retrieve featured playlists
@@ -818,7 +818,7 @@ declare class SpotifyWebApi {
      * featured playlists. Not returned if a callback is given.
      */
     getFeaturedPlaylists(options: GetFeaturedPlaylistsOptions, callback: Callback<SpotifyApi.ListOfFeaturedPlaylistsResponse>): void;
-    getFeaturedPlaylists(options?: GetFeaturedPlaylistsOptions): Promise<Response<SpotifyApi.ListOfFeaturedPlaylistsResponse>>;
+    getFeaturedPlaylists(options?: GetFeaturedPlaylistsOptions): Promise<SpotifyWebApi.Response<SpotifyApi.ListOfFeaturedPlaylistsResponse>>;
 
     /**
      * Retrieve a list of categories used to tag items in Spotify (e.g. in the 'Browse' tab)
@@ -828,7 +828,7 @@ declare class SpotifyWebApi {
      * Not returned if a callback is given.
      */
     getCategories(options: PaginationLocaleOptions, callback: Callback<SpotifyApi.MultipleCategoriesResponse>): void;
-    getCategories(options?: PaginationLocaleOptions): Promise<Response<SpotifyApi.MultipleCategoriesResponse>>;
+    getCategories(options?: PaginationLocaleOptions): Promise<SpotifyWebApi.Response<SpotifyApi.MultipleCategoriesResponse>>;
 
     /**
      * Retrieve a category.
@@ -839,7 +839,7 @@ declare class SpotifyWebApi {
      * Not returned if a callback is given.
      */
     getCategory(categoryId: string, options: LocaleOptions, callback: Callback<SpotifyApi.SingleCategoryResponse>): void;
-    getCategory(categoryId: string, options?: LocaleOptions): Promise<Response<SpotifyApi.SingleCategoryResponse>>;
+    getCategory(categoryId: string, options?: LocaleOptions): Promise<SpotifyWebApi.Response<SpotifyApi.SingleCategoryResponse>>;
 
     /**
      * Retrieve playlists for a category.
@@ -850,7 +850,7 @@ declare class SpotifyWebApi {
      * Not returned if a callback is given.
      */
     getPlaylistsForCategory(categoryId: string, options: PaginationCountryOptions, callback: Callback<SpotifyApi.CategoryPlaylistsReponse>): void;
-    getPlaylistsForCategory(categoryId: string, options?: PaginationCountryOptions): Promise<Response<SpotifyApi.CategoryPlaylistsReponse>>;
+    getPlaylistsForCategory(categoryId: string, options?: PaginationCountryOptions): Promise<SpotifyWebApi.Response<SpotifyApi.CategoryPlaylistsReponse>>;
 
     /**
      * Request an access token using the Client Credentials flow.
@@ -861,7 +861,7 @@ declare class SpotifyWebApi {
      *          token type and time to expiration. If rejected, it contains an error object. Not returned if a callback is given.
      */
     clientCredentialsGrant(options: {}, callback: Callback<ClientCredentialsGrantResponse>): void;
-    clientCredentialsGrant(options?: {}): Promise<Response<ClientCredentialsGrantResponse>>;
+    clientCredentialsGrant(options?: {}): Promise<SpotifyWebApi.Response<ClientCredentialsGrantResponse>>;
 
     /**
      * Request an access token using the Authorization Code flow.
@@ -872,8 +872,8 @@ declare class SpotifyWebApi {
      *          refresh token, token type and time to expiration. If rejected, it contains an error object.
      *          Not returned if a callback is given.
      */
-    authorizationCodeGrant(code: string, callback: Callback<AuthorizationCodeGrantResponse>): void;
-    authorizationCodeGrant(code: string): Promise<Response<AuthorizationCodeGrantResponse>>;
+    authorizationCodeGrant(code: string, callback: Callback<SpotifyWebApi.AuthorizationCodeGrantResponse>): void;
+    authorizationCodeGrant(code: string): Promise<SpotifyWebApi.Response<SpotifyWebApi.AuthorizationCodeGrantResponse>>;
 
     /**
      * Refresh the access token given that it hasn't expired.
@@ -883,16 +883,41 @@ declare class SpotifyWebApi {
      *          access token, time to expiration and token type. If rejected, it contains an error object.
      *          Not returned if a callback is given.
      */
-    refreshAccessToken(callback: Callback<RefreshAccessTokenResponse>): void;
-    refreshAccessToken(): Promise<Response<RefreshAccessTokenResponse>>;
+    refreshAccessToken(callback: Callback<SpotifyWebApi.RefreshAccessTokenResponse>): void;
+    refreshAccessToken(): Promise<SpotifyWebApi.Response<SpotifyWebApi.RefreshAccessTokenResponse>>;
 }
 
-type Callback<T> = (error: Error, response: Response<T>) => void;
+type Callback<T> = (error: Error, response: SpotifyWebApi.Response<T>) => void;
 
-interface Response<T> {
-    body: T;
-    headers: Record<string, string>;
-    statusCode: number;
+declare namespace SpotifyWebApi {
+    interface Response<T> {
+        body: T;
+        headers: Record<string, string>;
+        statusCode: number;
+    }
+
+    /**
+     * Response returned when requesting for access token
+     * https://developer.spotify.com/documentation/general/guides/authorization-guide/#2-have-your-application-request-refresh-and-access-tokens-spotify-returns-access-and-refresh-tokens
+     */
+    interface AuthorizationCodeGrantResponse {
+        access_token: string;
+        expires_in: number;
+        refresh_token: string;
+        scope: string;
+        token_type: string;
+    }
+
+    /**
+     * Response returned when requesting new access token (via refresh token)
+     * https://developer.spotify.com/documentation/general/guides/authorization-guide/#4-requesting-a-refreshed-access-token-spotify-returns-a-new-access-token-to-your-app
+     */
+    interface RefreshAccessTokenResponse {
+        access_token: string;
+        expires_in: number;
+        scope: string;
+        token_type: string;
+    }
 }
 
 interface Credentials {
@@ -1075,27 +1100,4 @@ interface ClientCredentialsGrantResponse {
     token_type: string;
 }
 
-/**
- * Response returned when requesting for access token
- * https://developer.spotify.com/documentation/general/guides/authorization-guide/#2-have-your-application-request-refresh-and-access-tokens-spotify-returns-access-and-refresh-tokens
- */
-interface AuthorizationCodeGrantResponse {
-    access_token: string;
-    expires_in: number;
-    refresh_token: string;
-    scope: string;
-    token_type: string;
-}
-
-/**
- * Response returned when requesting new access token (via refresh token)
- * https://developer.spotify.com/documentation/general/guides/authorization-guide/#4-requesting-a-refreshed-access-token-spotify-returns-a-new-access-token-to-your-app
- */
-interface RefreshAccessTokenResponse {
-    access_token: string;
-    expires_in: number;
-    scope: string;
-    token_type: string;
-}
-
 export = SpotifyWebApi;
